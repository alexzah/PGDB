/* This file was generated by PyBindGen 0.16.0 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX < 0x020400F0

#define PyEval_ThreadsInitialized() 1

#define Py_CLEAR(op)				\
        do {                            	\
                if (op) {			\
                        PyObject *tmp = (PyObject *)(op);	\
                        (op) = NULL;		\
                        Py_DECREF(tmp);		\
                }				\
        } while (0)


#define Py_VISIT(op)							\
        do { 								\
                if (op) {						\
                        int vret = visit((PyObject *)(op), arg);	\
                        if (vret)					\
                                return vret;				\
                }							\
        } while (0)

#endif



#if PY_VERSION_HEX < 0x020500F0

typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intobjargproc ssizeobjargproc;

#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;


#include "mrnet/MRNet.h"
#include "mrnetbind.h"
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    std::map<std::string, std::string> *obj;
} Pystd__map__lt__std__string__std__string__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt__std__string__std__string__gt__ *container;
    std::map<std::string, std::string>::iterator *iterator;
} Pystd__map__lt__std__string__std__string__gt__Iter;


extern PyTypeObject Pystd__map__lt__std__string__std__string__gt___Type;
extern PyTypeObject Pystd__map__lt__std__string__std__string__gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___std__string__std__string___gt__(PyObject *arg, std::map<std::string, std::string> *container);

typedef struct {
    PyObject_HEAD
    std::set<MRN::CommunicationNode*> *obj;
} Pystd__set__lt__MRN__CommunicationNode__star____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__set__lt__MRN__CommunicationNode__star____gt__ *container;
    std::set<MRN::CommunicationNode*>::iterator *iterator;
} Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter;


extern PyTypeObject Pystd__set__lt__MRN__CommunicationNode__star____gt___Type;
extern PyTypeObject Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter_Type;

int _wrap_convert_py2c__std__set__lt___MRN__CommunicationNode___star_____gt__(PyObject *arg, std::set<MRN::CommunicationNode*> *container);

typedef struct {
    PyObject_HEAD
    std::set<MRN::NetworkTopology::Node*> *obj;
} Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__ *container;
    std::set<MRN::NetworkTopology::Node*>::iterator *iterator;
} Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter;


extern PyTypeObject Pystd__set__lt__MRN__NetworkTopology__Node__star____gt___Type;
extern PyTypeObject Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter_Type;

int _wrap_convert_py2c__std__set__lt___MRN__NetworkTopology__Node___star_____gt__(PyObject *arg, std::set<MRN::NetworkTopology::Node*> *container);

typedef struct {
    PyObject_HEAD
    std::vector<MRN::NetworkTopology::Node*> *obj;
} Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__ *container;
    std::vector<MRN::NetworkTopology::Node*>::iterator *iterator;
} Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter;


extern PyTypeObject Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt___Type;
extern PyTypeObject Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___MRN__NetworkTopology__Node___star_____gt__(PyObject *arg, std::vector<MRN::NetworkTopology::Node*> *container);

typedef struct {
    PyObject_HEAD
    std::set<uint32_t> *obj;
} Pystd__set__lt__uint32_t__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__set__lt__uint32_t__gt__ *container;
    std::set<uint32_t>::iterator *iterator;
} Pystd__set__lt__uint32_t__gt__Iter;


extern PyTypeObject Pystd__set__lt__uint32_t__gt___Type;
extern PyTypeObject Pystd__set__lt__uint32_t__gt__Iter_Type;

int _wrap_convert_py2c__std__set__lt___uint32_t___gt__(PyObject *arg, std::set<uint32_t> *container);

typedef struct {
    PyObject_HEAD
    std::vector<int> *obj;
} Pystd__vector__lt__int__gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt__int__gt__ *container;
    std::vector<int>::iterator *iterator;
} Pystd__vector__lt__int__gt__Iter;


extern PyTypeObject Pystd__vector__lt__int__gt___Type;
extern PyTypeObject Pystd__vector__lt__int__gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___int___gt__(PyObject *arg, std::vector<int> *container);
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    MRN::CommunicationNode *obj;
    PyBindGenWrapperFlags flags:8;
} PyMRNCommunicationNode;


extern PyTypeObject PyMRNCommunicationNode_Type;


typedef struct {
    PyObject_HEAD
    MRN::Communicator *obj;
    PyBindGenWrapperFlags flags:8;
} PyMRNCommunicator;


extern PyTypeObject PyMRNCommunicator_Type;


typedef struct {
    PyObject_HEAD
    MRN::Error *obj;
    PyBindGenWrapperFlags flags:8;
} PyMRNError;


extern PyTypeObject PyMRNError_Type;


typedef struct {
    PyObject_HEAD
    MRN::Event *obj;
    PyBindGenWrapperFlags flags:8;
} PyMRNEvent;


extern PyTypeObject PyMRNEvent_Type;
extern PyTypeObject PyMRNEventMeta_Type;


typedef struct {
    PyObject_HEAD
    MRN::DataEvent *obj;
    PyBindGenWrapperFlags flags:8;
} PyMRNDataEvent;


extern PyTypeObject PyMRNDataEvent_Type;
extern PyTypeObject PyMRNDataEventMeta_Type;


typedef struct {
    PyObject_HEAD
    MRN::ErrorEvent *obj;
    PyBindGenWrapperFlags flags:8;
} PyMRNErrorEvent;


extern PyTypeObject PyMRNErrorEvent_Type;
extern PyTypeObject PyMRNErrorEventMeta_Type;


typedef struct {
    PyObject_HEAD
    MRN::TopologyEvent *obj;
    PyBindGenWrapperFlags flags:8;
} PyMRNTopologyEvent;


extern PyTypeObject PyMRNTopologyEvent_Type;
extern PyTypeObject PyMRNTopologyEventMeta_Type;


typedef struct {
    PyObject_HEAD
    MRN::NetworkTopology *obj;
    PyBindGenWrapperFlags flags:8;
} PyMRNNetworkTopology;


extern PyTypeObject PyMRNNetworkTopology_Type;


typedef struct {
    PyObject_HEAD
    MRN::NetworkTopology::Node *obj;
    PyBindGenWrapperFlags flags:8;
} PyMRNNetworkTopologyNode;


extern PyTypeObject PyMRNNetworkTopologyNode_Type;


typedef struct {
    PyObject_HEAD
    MRN::Packet *obj;
    PyBindGenWrapperFlags flags:8;
} PyMRNPacket;


extern PyTypeObject PyMRNPacket_Type;


typedef struct {
    PyObject_HEAD
    MRN::Stream *obj;
    PyBindGenWrapperFlags flags:8;
} PyMRNStream;


extern PyTypeObject PyMRNStream_Type;


typedef struct {
    PyObject_HEAD
    MRN::Network *obj;
    PyBindGenWrapperFlags flags:8;
} PyMRNNetwork;


extern PyTypeObject PyMRNNetwork_Type;


typedef struct {
    PyObject_HEAD
    MRN::PacketPtr *obj;
    PyBindGenWrapperFlags flags:8;
} PyMRNPacketPtr;


extern PyTypeObject PyMRNPacketPtr_Type;


typedef struct {
    PyObject_HEAD
    MRN::EventData *obj;
    PyBindGenWrapperFlags flags:8;
} PyMRNEventData;


extern PyTypeObject PyMRNEventData_Type;


typedef struct {
    PyObject_HEAD
    MRN::ErrorDef *obj;
    PyBindGenWrapperFlags flags:8;
} PyMRNErrorDef;


extern PyTypeObject PyMRNErrorDef_Type;


int _wrap_convert_py2c__std__string(PyObject *value, std::string *address);


int _wrap_convert_py2c__MRN__CommunicationNode___star__(PyObject *value, MRN::CommunicationNode * *address);


int _wrap_convert_py2c__MRN__NetworkTopology__Node___star__(PyObject *value, MRN::NetworkTopology::Node * *address);


int _wrap_convert_py2c__uint32_t(PyObject *value, uint32_t *address);


int _wrap_convert_py2c__int(PyObject *value, int *address);

static PyMethodDef MRNet_MRN_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */



static int
_wrap_PyMRNCommunicationNode__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'CommunicationNode' cannot be constructed ()");
    return -1;
}


PyObject *
_wrap_PyMRNCommunicationNode_get_Rank(PyMRNCommunicationNode *self)
{
    PyObject *py_retval;
    uint32_t retval;

    retval = self->obj->get_Rank();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNCommunicationNode_get_HostName(PyMRNCommunicationNode *self)
{
    PyObject *py_retval;
    std::string retval;

    retval = self->obj->get_HostName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyMRNCommunicationNode_get_Port(PyMRNCommunicationNode *self)
{
    PyObject *py_retval;
    uint16_t retval;

    retval = self->obj->get_Port();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

static PyMethodDef PyMRNCommunicationNode_methods[] = {
    {(char *) "get_Rank", (PyCFunction) _wrap_PyMRNCommunicationNode_get_Rank, METH_NOARGS, NULL },
    {(char *) "get_HostName", (PyCFunction) _wrap_PyMRNCommunicationNode_get_HostName, METH_NOARGS, NULL },
    {(char *) "get_Port", (PyCFunction) _wrap_PyMRNCommunicationNode_get_Port, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyMRNCommunicationNode__tp_dealloc(PyMRNCommunicationNode *self)
{
        MRN::CommunicationNode *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyMRNCommunicationNode__tp_richcompare (PyMRNCommunicationNode *PYBINDGEN_UNUSED(self), PyMRNCommunicationNode *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyMRNCommunicationNode_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyMRNCommunicationNode_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.MRN.CommunicationNode",            /* tp_name */
    sizeof(PyMRNCommunicationNode),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyMRNCommunicationNode__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyMRNCommunicationNode__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyMRNCommunicationNode_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyMRNCommunicationNode__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyMRNCommunicator__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'Communicator' cannot be constructed ()");
    return -1;
}



PyObject *
_wrap_PyMRNCommunicator_add_EndPoint__0(PyMRNCommunicator *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    bool retval;
    unsigned int irank;
    const char *keywords[] = {"irank", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &irank)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->add_EndPoint(irank);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyMRNCommunicator_add_EndPoint__1(PyMRNCommunicator *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    bool retval;
    PyMRNCommunicationNode *node;
    MRN::CommunicationNode *node_ptr;
    const char *keywords[] = {"node", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyMRNCommunicationNode_Type, &node)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    retval = self->obj->add_EndPoint(node_ptr);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject * _wrap_PyMRNCommunicator_add_EndPoint(PyMRNCommunicator *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyMRNCommunicator_add_EndPoint__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyMRNCommunicator_add_EndPoint__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyMRNCommunicator_get_EndPoints(PyMRNCommunicator *self)
{
    PyObject *py_retval;
    std::set< MRN::CommunicationNode * > retval;
    Pystd__set__lt__MRN__CommunicationNode__star____gt__ *py_std__set__lt__MRN__CommunicationNode__star____gt__;

    retval = self->obj->get_EndPoints();
    py_std__set__lt__MRN__CommunicationNode__star____gt__ = PyObject_New(Pystd__set__lt__MRN__CommunicationNode__star____gt__, &Pystd__set__lt__MRN__CommunicationNode__star____gt___Type);
    py_std__set__lt__MRN__CommunicationNode__star____gt__->obj = new std::set<MRN::CommunicationNode*>(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__set__lt__MRN__CommunicationNode__star____gt__);
    return py_retval;
}


PyObject *
_wrap_PyMRNCommunicator_size(PyMRNCommunicator *self)
{
    PyObject *py_retval;
    unsigned int retval;

    retval = self->obj->size();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

static PyMethodDef PyMRNCommunicator_methods[] = {
    {(char *) "add_EndPoint", (PyCFunction) _wrap_PyMRNCommunicator_add_EndPoint, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "get_EndPoints", (PyCFunction) _wrap_PyMRNCommunicator_get_EndPoints, METH_NOARGS, NULL },
    {(char *) "size", (PyCFunction) _wrap_PyMRNCommunicator_size, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyMRNCommunicator__tp_dealloc(PyMRNCommunicator *self)
{
        MRN::Communicator *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyMRNCommunicator__tp_richcompare (PyMRNCommunicator *PYBINDGEN_UNUSED(self), PyMRNCommunicator *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyMRNCommunicator_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyMRNCommunicator_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.MRN.Communicator",            /* tp_name */
    sizeof(PyMRNCommunicator),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyMRNCommunicator__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyMRNCommunicator__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyMRNCommunicator_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyMRNCommunicator__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyMRNError__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'Error' cannot be constructed ()");
    return -1;
}


PyObject *
_wrap_PyMRNError_has_Error(PyMRNError *self)
{
    PyObject *py_retval;
    bool retval;

    retval = self->obj->has_Error();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNError_get_ErrorStr(PyMRNError *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char const *retval;
    MRN::ErrorCode err;
    const char *keywords[] = {"err", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &err)) {
        return NULL;
    }
    retval = self->obj->get_ErrorStr(err);
    py_retval = Py_BuildValue((char *) "s", retval);
    return py_retval;
}


PyObject *
_wrap_PyMRNError_get_Error(PyMRNError *self)
{
    PyObject *py_retval;
    MRN::ErrorCode retval;

    retval = self->obj->get_Error();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

static PyMethodDef PyMRNError_methods[] = {
    {(char *) "has_Error", (PyCFunction) _wrap_PyMRNError_has_Error, METH_NOARGS, NULL },
    {(char *) "get_ErrorStr", (PyCFunction) _wrap_PyMRNError_get_ErrorStr, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "get_Error", (PyCFunction) _wrap_PyMRNError_get_Error, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyMRNError__tp_dealloc(PyMRNError *self)
{
        MRN::Error *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyMRNError__tp_richcompare (PyMRNError *PYBINDGEN_UNUSED(self), PyMRNError *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyMRNError_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyMRNError_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.MRN.Error",            /* tp_name */
    sizeof(PyMRNError),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyMRNError__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyMRNError__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyMRNError_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyMRNError__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyMRNEvent__get_EVENT_CLASS_ALL(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", MRN::Event::EVENT_CLASS_ALL);
    return py_retval;
}
static int _wrap_PyMRNEvent__set_EVENT_CLASS_ALL(PyMRNEvent * PYBINDGEN_UNUSED(dummy), PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &MRN::Event::EVENT_CLASS_ALL)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyMRNEvent__get_DATA_EVENT(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", MRN::Event::DATA_EVENT);
    return py_retval;
}
static int _wrap_PyMRNEvent__set_DATA_EVENT(PyMRNEvent * PYBINDGEN_UNUSED(dummy), PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &MRN::Event::DATA_EVENT)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyMRNEvent__get_TOPOLOGY_EVENT(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", MRN::Event::TOPOLOGY_EVENT);
    return py_retval;
}
static int _wrap_PyMRNEvent__set_TOPOLOGY_EVENT(PyMRNEvent * PYBINDGEN_UNUSED(dummy), PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &MRN::Event::TOPOLOGY_EVENT)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyMRNEvent__get_ERROR_EVENT(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", MRN::Event::ERROR_EVENT);
    return py_retval;
}
static int _wrap_PyMRNEvent__set_ERROR_EVENT(PyMRNEvent * PYBINDGEN_UNUSED(dummy), PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &MRN::Event::ERROR_EVENT)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef MRNEventMeta__getsets[] = {
    {
        (char*) "TOPOLOGY_EVENT", /* attribute name */
        (getter) _wrap_PyMRNEvent__get_TOPOLOGY_EVENT, /* C function to get the attribute */
        (setter) _wrap_PyMRNEvent__set_TOPOLOGY_EVENT, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "ERROR_EVENT", /* attribute name */
        (getter) _wrap_PyMRNEvent__get_ERROR_EVENT, /* C function to get the attribute */
        (setter) _wrap_PyMRNEvent__set_ERROR_EVENT, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "EVENT_CLASS_ALL", /* attribute name */
        (getter) _wrap_PyMRNEvent__get_EVENT_CLASS_ALL, /* C function to get the attribute */
        (setter) _wrap_PyMRNEvent__set_EVENT_CLASS_ALL, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "DATA_EVENT", /* attribute name */
        (getter) _wrap_PyMRNEvent__get_DATA_EVENT, /* C function to get the attribute */
        (setter) _wrap_PyMRNEvent__set_DATA_EVENT, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

PyTypeObject PyMRNEventMeta_Type = {
	PyObject_HEAD_INIT(NULL)
	0,					/* ob_size */
	(char *) "MRNEventMeta",		        /* tp_name */
	0,					/* tp_basicsize */
	0,					/* tp_itemsize */
	0,	 				/* tp_dealloc */
	0,					/* tp_print */
	0,					/* tp_getattr */
	0,					/* tp_setattr */
	0,					/* tp_compare */
	0,					/* tp_repr */
	0,					/* tp_as_number */
	0,					/* tp_as_sequence */
	0,		       			/* tp_as_mapping */
	0,					/* tp_hash */
	0,					/* tp_call */
	0,					/* tp_str */
	0,					/* tp_getattro */
	0,					/* tp_setattro */
	0,					/* tp_as_buffer */
	Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, /* tp_flags */
 	0,					/* tp_doc */
	0,					/* tp_traverse */
 	0,					/* tp_clear */
	0,					/* tp_richcompare */
	0,					/* tp_weaklistoffset */
	0,					/* tp_iter */
	0,					/* tp_iternext */
	0,					/* tp_methods */
	0,					/* tp_members */
	MRNEventMeta__getsets,				/* tp_getset */
	0,					/* tp_base */
	0,					/* tp_dict */
	0,	                                /* tp_descr_get */
	0,  		                        /* tp_descr_set */
	0,					/* tp_dictoffset */
	0,					/* tp_init */
	0,					/* tp_alloc */
	0,					/* tp_new */
	0,               			/* tp_free */
        0,                                      /* tp_is_gc */
        0,                                      /* tp_bases */
        0,                                      /* tp_mro */
        0,                                      /* tp_cache */
        0,                                      /* tp_subclasses */
        0,                                      /* tp_weaklist */
        0                                       /* tp_del */
};


static int
_wrap_PyMRNEvent__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'Event' cannot be constructed ()");
    return -1;
}


PyObject *
_wrap_PyMRNEvent_get_Class(PyMRNEvent *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->get_Class();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyMRNEvent_get_Data(PyMRNEvent *self)
{
    PyObject *py_retval;
    MRN::EventData *retval;
    PyMRNEventData *py_EventData;

    retval = self->obj->get_Data();
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_EventData = PyObject_New(PyMRNEventData, &PyMRNEventData_Type);
    py_EventData->obj = retval;
    py_EventData->flags = PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED;
    py_retval = Py_BuildValue((char *) "N", py_EventData);
    return py_retval;
}


PyObject *
_wrap_PyMRNEvent_get_Type(PyMRNEvent *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->get_Type();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

static PyMethodDef PyMRNEvent_methods[] = {
    {(char *) "get_Class", (PyCFunction) _wrap_PyMRNEvent_get_Class, METH_NOARGS, NULL },
    {(char *) "get_Data", (PyCFunction) _wrap_PyMRNEvent_get_Data, METH_NOARGS, NULL },
    {(char *) "get_Type", (PyCFunction) _wrap_PyMRNEvent_get_Type, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyMRNEvent__tp_dealloc(PyMRNEvent *self)
{
        MRN::Event *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyMRNEvent__tp_richcompare (PyMRNEvent *PYBINDGEN_UNUSED(self), PyMRNEvent *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyMRNEvent_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyMRNEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.MRN.Event",            /* tp_name */
    sizeof(PyMRNEvent),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyMRNEvent__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyMRNEvent__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyMRNEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyMRNEvent__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyMRNDataEvent__get_DATA_AVAILABLE(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", MRN::DataEvent::DATA_AVAILABLE);
    return py_retval;
}
static int _wrap_PyMRNDataEvent__set_DATA_AVAILABLE(PyMRNDataEvent * PYBINDGEN_UNUSED(dummy), PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &MRN::DataEvent::DATA_AVAILABLE)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef MRNDataEventMeta__getsets[] = {
    {
        (char*) "DATA_AVAILABLE", /* attribute name */
        (getter) _wrap_PyMRNDataEvent__get_DATA_AVAILABLE, /* C function to get the attribute */
        (setter) _wrap_PyMRNDataEvent__set_DATA_AVAILABLE, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

PyTypeObject PyMRNDataEventMeta_Type = {
	PyObject_HEAD_INIT(NULL)
	0,					/* ob_size */
	(char *) "MRNDataEventMeta",		        /* tp_name */
	0,					/* tp_basicsize */
	0,					/* tp_itemsize */
	0,	 				/* tp_dealloc */
	0,					/* tp_print */
	0,					/* tp_getattr */
	0,					/* tp_setattr */
	0,					/* tp_compare */
	0,					/* tp_repr */
	0,					/* tp_as_number */
	0,					/* tp_as_sequence */
	0,		       			/* tp_as_mapping */
	0,					/* tp_hash */
	0,					/* tp_call */
	0,					/* tp_str */
	0,					/* tp_getattro */
	0,					/* tp_setattro */
	0,					/* tp_as_buffer */
	Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, /* tp_flags */
 	0,					/* tp_doc */
	0,					/* tp_traverse */
 	0,					/* tp_clear */
	0,					/* tp_richcompare */
	0,					/* tp_weaklistoffset */
	0,					/* tp_iter */
	0,					/* tp_iternext */
	0,					/* tp_methods */
	0,					/* tp_members */
	MRNDataEventMeta__getsets,				/* tp_getset */
	0,					/* tp_base */
	0,					/* tp_dict */
	0,	                                /* tp_descr_get */
	0,  		                        /* tp_descr_set */
	0,					/* tp_dictoffset */
	0,					/* tp_init */
	0,					/* tp_alloc */
	0,					/* tp_new */
	0,               			/* tp_free */
        0,                                      /* tp_is_gc */
        0,                                      /* tp_bases */
        0,                                      /* tp_mro */
        0,                                      /* tp_cache */
        0,                                      /* tp_subclasses */
        0,                                      /* tp_weaklist */
        0                                       /* tp_del */
};


static int
_wrap_PyMRNDataEvent__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'DataEvent' cannot be constructed ()");
    return -1;
}

static PyMethodDef PyMRNDataEvent_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyMRNDataEvent__tp_dealloc(PyMRNDataEvent *self)
{
        MRN::DataEvent *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyMRNDataEvent__tp_richcompare (PyMRNDataEvent *PYBINDGEN_UNUSED(self), PyMRNDataEvent *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyMRNDataEvent_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyMRNDataEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.MRN.DataEvent",            /* tp_name */
    sizeof(PyMRNDataEvent),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyMRNDataEvent__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyMRNDataEvent__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyMRNDataEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyMRNDataEvent__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyMRNErrorEvent__get_ERROR_INTERNAL(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", MRN::ErrorEvent::ERROR_INTERNAL);
    return py_retval;
}
static int _wrap_PyMRNErrorEvent__set_ERROR_INTERNAL(PyMRNErrorEvent * PYBINDGEN_UNUSED(dummy), PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &MRN::ErrorEvent::ERROR_INTERNAL)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyMRNErrorEvent__get_ERROR_SYSTEM(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", MRN::ErrorEvent::ERROR_SYSTEM);
    return py_retval;
}
static int _wrap_PyMRNErrorEvent__set_ERROR_SYSTEM(PyMRNErrorEvent * PYBINDGEN_UNUSED(dummy), PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &MRN::ErrorEvent::ERROR_SYSTEM)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyMRNErrorEvent__get_ERROR_USAGE(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", MRN::ErrorEvent::ERROR_USAGE);
    return py_retval;
}
static int _wrap_PyMRNErrorEvent__set_ERROR_USAGE(PyMRNErrorEvent * PYBINDGEN_UNUSED(dummy), PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &MRN::ErrorEvent::ERROR_USAGE)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef MRNErrorEventMeta__getsets[] = {
    {
        (char*) "ERROR_INTERNAL", /* attribute name */
        (getter) _wrap_PyMRNErrorEvent__get_ERROR_INTERNAL, /* C function to get the attribute */
        (setter) _wrap_PyMRNErrorEvent__set_ERROR_INTERNAL, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "ERROR_SYSTEM", /* attribute name */
        (getter) _wrap_PyMRNErrorEvent__get_ERROR_SYSTEM, /* C function to get the attribute */
        (setter) _wrap_PyMRNErrorEvent__set_ERROR_SYSTEM, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "ERROR_USAGE", /* attribute name */
        (getter) _wrap_PyMRNErrorEvent__get_ERROR_USAGE, /* C function to get the attribute */
        (setter) _wrap_PyMRNErrorEvent__set_ERROR_USAGE, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

PyTypeObject PyMRNErrorEventMeta_Type = {
	PyObject_HEAD_INIT(NULL)
	0,					/* ob_size */
	(char *) "MRNErrorEventMeta",		        /* tp_name */
	0,					/* tp_basicsize */
	0,					/* tp_itemsize */
	0,	 				/* tp_dealloc */
	0,					/* tp_print */
	0,					/* tp_getattr */
	0,					/* tp_setattr */
	0,					/* tp_compare */
	0,					/* tp_repr */
	0,					/* tp_as_number */
	0,					/* tp_as_sequence */
	0,		       			/* tp_as_mapping */
	0,					/* tp_hash */
	0,					/* tp_call */
	0,					/* tp_str */
	0,					/* tp_getattro */
	0,					/* tp_setattro */
	0,					/* tp_as_buffer */
	Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, /* tp_flags */
 	0,					/* tp_doc */
	0,					/* tp_traverse */
 	0,					/* tp_clear */
	0,					/* tp_richcompare */
	0,					/* tp_weaklistoffset */
	0,					/* tp_iter */
	0,					/* tp_iternext */
	0,					/* tp_methods */
	0,					/* tp_members */
	MRNErrorEventMeta__getsets,				/* tp_getset */
	0,					/* tp_base */
	0,					/* tp_dict */
	0,	                                /* tp_descr_get */
	0,  		                        /* tp_descr_set */
	0,					/* tp_dictoffset */
	0,					/* tp_init */
	0,					/* tp_alloc */
	0,					/* tp_new */
	0,               			/* tp_free */
        0,                                      /* tp_is_gc */
        0,                                      /* tp_bases */
        0,                                      /* tp_mro */
        0,                                      /* tp_cache */
        0,                                      /* tp_subclasses */
        0,                                      /* tp_weaklist */
        0                                       /* tp_del */
};


static int
_wrap_PyMRNErrorEvent__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'ErrorEvent' cannot be constructed ()");
    return -1;
}

static PyMethodDef PyMRNErrorEvent_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyMRNErrorEvent__tp_dealloc(PyMRNErrorEvent *self)
{
        MRN::ErrorEvent *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyMRNErrorEvent__tp_richcompare (PyMRNErrorEvent *PYBINDGEN_UNUSED(self), PyMRNErrorEvent *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyMRNErrorEvent_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyMRNErrorEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.MRN.ErrorEvent",            /* tp_name */
    sizeof(PyMRNErrorEvent),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyMRNErrorEvent__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyMRNErrorEvent__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyMRNErrorEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyMRNErrorEvent__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyMRNTopologyEvent__get_TOPOL_ADD_BE(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", MRN::TopologyEvent::TOPOL_ADD_BE);
    return py_retval;
}
static int _wrap_PyMRNTopologyEvent__set_TOPOL_ADD_BE(PyMRNTopologyEvent * PYBINDGEN_UNUSED(dummy), PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &MRN::TopologyEvent::TOPOL_ADD_BE)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyMRNTopologyEvent__get_TOPOL_ADD_CP(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", MRN::TopologyEvent::TOPOL_ADD_CP);
    return py_retval;
}
static int _wrap_PyMRNTopologyEvent__set_TOPOL_ADD_CP(PyMRNTopologyEvent * PYBINDGEN_UNUSED(dummy), PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &MRN::TopologyEvent::TOPOL_ADD_CP)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyMRNTopologyEvent__get_TOPOL_REMOVE_NODE(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", MRN::TopologyEvent::TOPOL_REMOVE_NODE);
    return py_retval;
}
static int _wrap_PyMRNTopologyEvent__set_TOPOL_REMOVE_NODE(PyMRNTopologyEvent * PYBINDGEN_UNUSED(dummy), PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &MRN::TopologyEvent::TOPOL_REMOVE_NODE)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyMRNTopologyEvent__get_TOPOL_CHANGE_PARENT(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", MRN::TopologyEvent::TOPOL_CHANGE_PARENT);
    return py_retval;
}
static int _wrap_PyMRNTopologyEvent__set_TOPOL_CHANGE_PARENT(PyMRNTopologyEvent * PYBINDGEN_UNUSED(dummy), PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &MRN::TopologyEvent::TOPOL_CHANGE_PARENT)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef MRNTopologyEventMeta__getsets[] = {
    {
        (char*) "TOPOL_ADD_BE", /* attribute name */
        (getter) _wrap_PyMRNTopologyEvent__get_TOPOL_ADD_BE, /* C function to get the attribute */
        (setter) _wrap_PyMRNTopologyEvent__set_TOPOL_ADD_BE, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "TOPOL_CHANGE_PARENT", /* attribute name */
        (getter) _wrap_PyMRNTopologyEvent__get_TOPOL_CHANGE_PARENT, /* C function to get the attribute */
        (setter) _wrap_PyMRNTopologyEvent__set_TOPOL_CHANGE_PARENT, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "TOPOL_ADD_CP", /* attribute name */
        (getter) _wrap_PyMRNTopologyEvent__get_TOPOL_ADD_CP, /* C function to get the attribute */
        (setter) _wrap_PyMRNTopologyEvent__set_TOPOL_ADD_CP, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "TOPOL_REMOVE_NODE", /* attribute name */
        (getter) _wrap_PyMRNTopologyEvent__get_TOPOL_REMOVE_NODE, /* C function to get the attribute */
        (setter) _wrap_PyMRNTopologyEvent__set_TOPOL_REMOVE_NODE, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

PyTypeObject PyMRNTopologyEventMeta_Type = {
	PyObject_HEAD_INIT(NULL)
	0,					/* ob_size */
	(char *) "MRNTopologyEventMeta",		        /* tp_name */
	0,					/* tp_basicsize */
	0,					/* tp_itemsize */
	0,	 				/* tp_dealloc */
	0,					/* tp_print */
	0,					/* tp_getattr */
	0,					/* tp_setattr */
	0,					/* tp_compare */
	0,					/* tp_repr */
	0,					/* tp_as_number */
	0,					/* tp_as_sequence */
	0,		       			/* tp_as_mapping */
	0,					/* tp_hash */
	0,					/* tp_call */
	0,					/* tp_str */
	0,					/* tp_getattro */
	0,					/* tp_setattro */
	0,					/* tp_as_buffer */
	Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, /* tp_flags */
 	0,					/* tp_doc */
	0,					/* tp_traverse */
 	0,					/* tp_clear */
	0,					/* tp_richcompare */
	0,					/* tp_weaklistoffset */
	0,					/* tp_iter */
	0,					/* tp_iternext */
	0,					/* tp_methods */
	0,					/* tp_members */
	MRNTopologyEventMeta__getsets,				/* tp_getset */
	0,					/* tp_base */
	0,					/* tp_dict */
	0,	                                /* tp_descr_get */
	0,  		                        /* tp_descr_set */
	0,					/* tp_dictoffset */
	0,					/* tp_init */
	0,					/* tp_alloc */
	0,					/* tp_new */
	0,               			/* tp_free */
        0,                                      /* tp_is_gc */
        0,                                      /* tp_bases */
        0,                                      /* tp_mro */
        0,                                      /* tp_cache */
        0,                                      /* tp_subclasses */
        0,                                      /* tp_weaklist */
        0                                       /* tp_del */
};


static int
_wrap_PyMRNTopologyEvent__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'TopologyEvent' cannot be constructed ()");
    return -1;
}

static PyMethodDef PyMRNTopologyEvent_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyMRNTopologyEvent__tp_dealloc(PyMRNTopologyEvent *self)
{
        MRN::TopologyEvent *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyMRNTopologyEvent__tp_richcompare (PyMRNTopologyEvent *PYBINDGEN_UNUSED(self), PyMRNTopologyEvent *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyMRNTopologyEvent_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyMRNTopologyEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.MRN.TopologyEvent",            /* tp_name */
    sizeof(PyMRNTopologyEvent),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyMRNTopologyEvent__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyMRNTopologyEvent__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyMRNTopologyEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyMRNTopologyEvent__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyMRNNetworkTopology__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'NetworkTopology' cannot be constructed ()");
    return -1;
}


PyObject *
_wrap_PyMRNNetworkTopology_print_DOTGraph(PyMRNNetworkTopology *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char const *filename;
    const char *keywords[] = {"filename", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s", (char **) keywords, &filename)) {
        return NULL;
    }
    self->obj->print_DOTGraph(filename);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyMRNNetworkTopology_get_OrphanNodes(PyMRNNetworkTopology *self)
{
    PyObject *py_retval;
    std::set<MRN::NetworkTopology::Node*> set_value;
    Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__ *py_std__set__lt__MRN__NetworkTopology__Node__star____gt__;

    self->obj->get_OrphanNodes(set_value);
    py_std__set__lt__MRN__NetworkTopology__Node__star____gt__ = PyObject_New(Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__, &Pystd__set__lt__MRN__NetworkTopology__Node__star____gt___Type);
    py_std__set__lt__MRN__NetworkTopology__Node__star____gt__->obj = new std::set<MRN::NetworkTopology::Node*>(set_value);
    py_retval = Py_BuildValue((char *) "N", py_std__set__lt__MRN__NetworkTopology__Node__star____gt__);
    return py_retval;
}


PyObject *
_wrap_PyMRNNetworkTopology_get_Leaves(PyMRNNetworkTopology *self)
{
    PyObject *py_retval;
    std::vector<MRN::NetworkTopology::Node*> leaves_value;
    Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__ *py_std__vector__lt__MRN__NetworkTopology__Node__star____gt__;

    self->obj->get_Leaves(leaves_value);
    py_std__vector__lt__MRN__NetworkTopology__Node__star____gt__ = PyObject_New(Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__, &Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt___Type);
    py_std__vector__lt__MRN__NetworkTopology__Node__star____gt__->obj = new std::vector<MRN::NetworkTopology::Node*>(leaves_value);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt__MRN__NetworkTopology__Node__star____gt__);
    return py_retval;
}


PyObject *
_wrap_PyMRNNetworkTopology_find_Node(PyMRNNetworkTopology *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    MRN::NetworkTopology::Node *retval;
    unsigned int rank;
    const char *keywords[] = {"rank", NULL};
    PyMRNNetworkTopologyNode *py_Node;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &rank)) {
        return NULL;
    }
    retval = self->obj->find_Node(rank);
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Node = PyObject_New(PyMRNNetworkTopologyNode, &PyMRNNetworkTopologyNode_Type);
    py_Node->obj = retval;
    py_Node->flags = PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED;
    py_retval = Py_BuildValue((char *) "N", py_Node);
    return py_retval;
}


PyObject *
_wrap_PyMRNNetworkTopology_get_NumNodes(PyMRNNetworkTopology *self)
{
    PyObject *py_retval;
    unsigned int retval;

    retval = self->obj->get_NumNodes();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNNetworkTopology_print_TopologyFile(PyMRNNetworkTopology *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char const *filename;
    const char *keywords[] = {"filename", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s", (char **) keywords, &filename)) {
        return NULL;
    }
    self->obj->print_TopologyFile(filename);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyMRNNetworkTopology_get_ParentNodes(PyMRNNetworkTopology *self)
{
    PyObject *py_retval;
    std::set<MRN::NetworkTopology::Node*> set_value;
    Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__ *py_std__set__lt__MRN__NetworkTopology__Node__star____gt__;

    self->obj->get_ParentNodes(set_value);
    py_std__set__lt__MRN__NetworkTopology__Node__star____gt__ = PyObject_New(Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__, &Pystd__set__lt__MRN__NetworkTopology__Node__star____gt___Type);
    py_std__set__lt__MRN__NetworkTopology__Node__star____gt__->obj = new std::set<MRN::NetworkTopology::Node*>(set_value);
    py_retval = Py_BuildValue((char *) "N", py_std__set__lt__MRN__NetworkTopology__Node__star____gt__);
    return py_retval;
}


PyObject *
_wrap_PyMRNNetworkTopology_get_BackEndNodes(PyMRNNetworkTopology *self)
{
    PyObject *py_retval;
    std::set<MRN::NetworkTopology::Node*> set_value;
    Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__ *py_std__set__lt__MRN__NetworkTopology__Node__star____gt__;

    self->obj->get_BackEndNodes(set_value);
    py_std__set__lt__MRN__NetworkTopology__Node__star____gt__ = PyObject_New(Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__, &Pystd__set__lt__MRN__NetworkTopology__Node__star____gt___Type);
    py_std__set__lt__MRN__NetworkTopology__Node__star____gt__->obj = new std::set<MRN::NetworkTopology::Node*>(set_value);
    py_retval = Py_BuildValue((char *) "N", py_std__set__lt__MRN__NetworkTopology__Node__star____gt__);
    return py_retval;
}


PyObject *
_wrap_PyMRNNetworkTopology_get_Root(PyMRNNetworkTopology *self)
{
    PyObject *py_retval;
    MRN::NetworkTopology::Node *retval;
    PyMRNNetworkTopologyNode *py_Node;

    retval = self->obj->get_Root();
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Node = PyObject_New(PyMRNNetworkTopologyNode, &PyMRNNetworkTopologyNode_Type);
    py_Node->obj = retval;
    py_Node->flags = PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED;
    py_retval = Py_BuildValue((char *) "N", py_Node);
    return py_retval;
}


PyObject *
_wrap_PyMRNNetworkTopology_get_TreeStatistics(PyMRNNetworkTopology *self)
{
    PyObject *py_retval;
    unsigned int  onum_nodes;
    unsigned int  odepth;
    unsigned int  omin_fanout;
    unsigned int  omax_fanout;
    double oavg_fanout;
    double ostddev_fanout;

    self->obj->get_TreeStatistics(onum_nodes, odepth, omin_fanout, omax_fanout, oavg_fanout, ostddev_fanout);
    py_retval = Py_BuildValue((char *) "IIIIdd", onum_nodes, odepth, omin_fanout, omax_fanout, oavg_fanout, ostddev_fanout);
    return py_retval;
}

static PyMethodDef PyMRNNetworkTopology_methods[] = {
    {(char *) "print_DOTGraph", (PyCFunction) _wrap_PyMRNNetworkTopology_print_DOTGraph, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "get_OrphanNodes", (PyCFunction) _wrap_PyMRNNetworkTopology_get_OrphanNodes, METH_NOARGS, NULL },
    {(char *) "get_Leaves", (PyCFunction) _wrap_PyMRNNetworkTopology_get_Leaves, METH_NOARGS, NULL },
    {(char *) "find_Node", (PyCFunction) _wrap_PyMRNNetworkTopology_find_Node, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "get_NumNodes", (PyCFunction) _wrap_PyMRNNetworkTopology_get_NumNodes, METH_NOARGS, NULL },
    {(char *) "print_TopologyFile", (PyCFunction) _wrap_PyMRNNetworkTopology_print_TopologyFile, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "get_ParentNodes", (PyCFunction) _wrap_PyMRNNetworkTopology_get_ParentNodes, METH_NOARGS, NULL },
    {(char *) "get_BackEndNodes", (PyCFunction) _wrap_PyMRNNetworkTopology_get_BackEndNodes, METH_NOARGS, NULL },
    {(char *) "get_Root", (PyCFunction) _wrap_PyMRNNetworkTopology_get_Root, METH_NOARGS, NULL },
    {(char *) "get_TreeStatistics", (PyCFunction) _wrap_PyMRNNetworkTopology_get_TreeStatistics, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyMRNNetworkTopology__tp_dealloc(PyMRNNetworkTopology *self)
{
        MRN::NetworkTopology *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyMRNNetworkTopology__tp_richcompare (PyMRNNetworkTopology *PYBINDGEN_UNUSED(self), PyMRNNetworkTopology *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyMRNNetworkTopology_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyMRNNetworkTopology_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.MRN.NetworkTopology",            /* tp_name */
    sizeof(PyMRNNetworkTopology),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyMRNNetworkTopology__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyMRNNetworkTopology__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyMRNNetworkTopology_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyMRNNetworkTopology__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyMRNNetworkTopologyNode__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'Node' cannot be constructed ()");
    return -1;
}


PyObject *
_wrap_PyMRNNetworkTopologyNode_get_Rank(PyMRNNetworkTopologyNode *self)
{
    PyObject *py_retval;
    uint32_t retval;

    retval = self->obj->get_Rank();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNNetworkTopologyNode_get_Children(PyMRNNetworkTopologyNode *self)
{
    PyObject *py_retval;
    std::set< MRN::NetworkTopology::Node * > retval;
    Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__ *py_std__set__lt__MRN__NetworkTopology__Node__star____gt__;

    retval = self->obj->get_Children();
    py_std__set__lt__MRN__NetworkTopology__Node__star____gt__ = PyObject_New(Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__, &Pystd__set__lt__MRN__NetworkTopology__Node__star____gt___Type);
    py_std__set__lt__MRN__NetworkTopology__Node__star____gt__->obj = new std::set<MRN::NetworkTopology::Node*>(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__set__lt__MRN__NetworkTopology__Node__star____gt__);
    return py_retval;
}


PyObject *
_wrap_PyMRNNetworkTopologyNode_get_HostName(PyMRNNetworkTopologyNode *self)
{
    PyObject *py_retval;
    std::string retval;

    retval = self->obj->get_HostName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyMRNNetworkTopologyNode_get_Port(PyMRNNetworkTopologyNode *self)
{
    PyObject *py_retval;
    uint16_t retval;

    retval = self->obj->get_Port();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyMRNNetworkTopologyNode_get_Parent(PyMRNNetworkTopologyNode *self)
{
    PyObject *py_retval;
    uint32_t retval;

    retval = self->obj->get_Parent();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNNetworkTopologyNode_find_SubTreeHeight(PyMRNNetworkTopologyNode *self)
{
    PyObject *py_retval;
    unsigned int retval;

    retval = self->obj->find_SubTreeHeight();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNNetworkTopologyNode_get_NumChildren(PyMRNNetworkTopologyNode *self)
{
    PyObject *py_retval;
    unsigned int retval;

    retval = self->obj->get_NumChildren();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

static PyMethodDef PyMRNNetworkTopologyNode_methods[] = {
    {(char *) "get_Rank", (PyCFunction) _wrap_PyMRNNetworkTopologyNode_get_Rank, METH_NOARGS, NULL },
    {(char *) "get_Children", (PyCFunction) _wrap_PyMRNNetworkTopologyNode_get_Children, METH_NOARGS, NULL },
    {(char *) "get_HostName", (PyCFunction) _wrap_PyMRNNetworkTopologyNode_get_HostName, METH_NOARGS, NULL },
    {(char *) "get_Port", (PyCFunction) _wrap_PyMRNNetworkTopologyNode_get_Port, METH_NOARGS, NULL },
    {(char *) "get_Parent", (PyCFunction) _wrap_PyMRNNetworkTopologyNode_get_Parent, METH_NOARGS, NULL },
    {(char *) "find_SubTreeHeight", (PyCFunction) _wrap_PyMRNNetworkTopologyNode_find_SubTreeHeight, METH_NOARGS, NULL },
    {(char *) "get_NumChildren", (PyCFunction) _wrap_PyMRNNetworkTopologyNode_get_NumChildren, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyMRNNetworkTopologyNode__tp_dealloc(PyMRNNetworkTopologyNode *self)
{
        MRN::NetworkTopology::Node *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyMRNNetworkTopologyNode__tp_richcompare (PyMRNNetworkTopologyNode *PYBINDGEN_UNUSED(self), PyMRNNetworkTopologyNode *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyMRNNetworkTopologyNode_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyMRNNetworkTopologyNode_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.MRN.NetworkTopology.Node",            /* tp_name */
    sizeof(PyMRNNetworkTopologyNode),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyMRNNetworkTopologyNode__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyMRNNetworkTopologyNode__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyMRNNetworkTopologyNode_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyMRNNetworkTopologyNode__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyMRNPacket__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'Packet' cannot be constructed ()");
    return -1;
}


PyObject *
_wrap_PyMRNPacket_get_SourceRank(PyMRNPacket *self)
{
    PyObject *py_retval;
    uint32_t retval;

    retval = self->obj->get_SourceRank();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNPacket_get_InletNodeRank(PyMRNPacket *self)
{
    PyObject *py_retval;
    uint32_t retval;

    retval = self->obj->get_InletNodeRank();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNPacket_set_StreamId(PyMRNPacket *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int istream_id;
    const char *keywords[] = {"istream_id", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &istream_id)) {
        return NULL;
    }
    self->obj->set_StreamId(istream_id);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyMRNPacket_set_DestroyData(PyMRNPacket *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool b;
    PyObject *py_b;
    const char *keywords[] = {"b", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_b)) {
        return NULL;
    }
    b = (bool) PyObject_IsTrue(py_b);
    self->obj->set_DestroyData(b);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyMRNPacket_set_Tag(PyMRNPacket *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int itag;
    const char *keywords[] = {"itag", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &itag)) {
        return NULL;
    }
    self->obj->set_Tag(itag);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyMRNPacket_get_StreamId(PyMRNPacket *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->get_StreamId();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyMRNPacket_get_Tag(PyMRNPacket *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->get_Tag();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyMRNPacket_set_Destinations(PyMRNPacket *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    uint32_t bes;
    unsigned int num_bes;
    const char *keywords[] = {"bes", "num_bes", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "II", (char **) keywords, &bes, &num_bes)) {
        return NULL;
    }
    retval = self->obj->set_Destinations(&bes, num_bes);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNPacket_unpack(PyMRNPacket *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    char const *ifmt;
    char *serialized;
    const char *keywords[] = {"ifmt", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s", (char **) keywords, &ifmt)) {
        return NULL;
    }
    retval = self->obj->unpack(ifmt, &serialized);
    py_retval = Py_BuildValue((char *) "is", retval, serialized);
    return py_retval;
}


PyObject *
_wrap_PyMRNPacket_get_FormatString(PyMRNPacket *self)
{
    PyObject *py_retval;
    char const *retval;

    retval = self->obj->get_FormatString();
    py_retval = Py_BuildValue((char *) "s", retval);
    return py_retval;
}

static PyMethodDef PyMRNPacket_methods[] = {
    {(char *) "get_SourceRank", (PyCFunction) _wrap_PyMRNPacket_get_SourceRank, METH_NOARGS, NULL },
    {(char *) "get_InletNodeRank", (PyCFunction) _wrap_PyMRNPacket_get_InletNodeRank, METH_NOARGS, NULL },
    {(char *) "set_StreamId", (PyCFunction) _wrap_PyMRNPacket_set_StreamId, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "set_DestroyData", (PyCFunction) _wrap_PyMRNPacket_set_DestroyData, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "set_Tag", (PyCFunction) _wrap_PyMRNPacket_set_Tag, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "get_StreamId", (PyCFunction) _wrap_PyMRNPacket_get_StreamId, METH_NOARGS, NULL },
    {(char *) "get_Tag", (PyCFunction) _wrap_PyMRNPacket_get_Tag, METH_NOARGS, NULL },
    {(char *) "set_Destinations", (PyCFunction) _wrap_PyMRNPacket_set_Destinations, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "unpack", (PyCFunction) _wrap_PyMRNPacket_unpack, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "get_FormatString", (PyCFunction) _wrap_PyMRNPacket_get_FormatString, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyMRNPacket__tp_dealloc(PyMRNPacket *self)
{
        MRN::Packet *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyMRNPacket__tp_richcompare (PyMRNPacket *PYBINDGEN_UNUSED(self), PyMRNPacket *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyMRNPacket_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        if (*self->obj != *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyMRNPacket_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.MRN.Packet",            /* tp_name */
    sizeof(PyMRNPacket),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyMRNPacket__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyMRNPacket__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyMRNPacket_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyMRNPacket__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyMRNStream__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'Stream' cannot be constructed ()");
    return -1;
}


PyObject *
_wrap_PyMRNStream_is_Closed(PyMRNStream *self)
{
    PyObject *py_retval;
    bool retval;

    retval = self->obj->is_Closed();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNStream_send(PyMRNStream *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    int itag;
    char const *format_string;
    char const *serialized;
    const char *keywords[] = {"itag", "format_string", "serialized", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iss", (char **) keywords, &itag, &format_string, &serialized)) {
        return NULL;
    }
    retval = self->obj->send(itag, format_string, serialized);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyMRNStream_get_Id(PyMRNStream *self)
{
    PyObject *py_retval;
    unsigned int retval;

    retval = self->obj->get_Id();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNStream_get_DataNotificationFd(PyMRNStream *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->get_DataNotificationFd();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyMRNStream_flush(PyMRNStream *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->flush();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyMRNStream_close_DataNotificationFd(PyMRNStream *self)
{
    PyObject *py_retval;

    self->obj->close_DataNotificationFd();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyMRNStream_set_FilterParameters(PyMRNStream *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    MRN::FilterType ftype;
    char const *format;
    int val;
    const char *keywords[] = {"ftype", "format", "val", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "isi", (char **) keywords, &ftype, &format, &val)) {
        return NULL;
    }
    retval = self->obj->set_FilterParameters(ftype, format, val);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyMRNStream_has_Data(PyMRNStream *self)
{
    PyObject *py_retval;
    bool retval;

    retval = self->obj->has_Data();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNStream_recv(PyMRNStream *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    int  otag;
    PyMRNPacketPtr *opacket;
    bool iblocking;
    PyObject *py_iblocking = NULL;
    const char *keywords[] = {"iblocking", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &py_iblocking)) {
        return NULL;
    }
    opacket = PyObject_New(PyMRNPacketPtr, &PyMRNPacketPtr_Type);
    opacket->obj = new MRN::PacketPtr();
    iblocking = py_iblocking? (bool) PyObject_IsTrue(py_iblocking) : true;
    retval = self->obj->recv(&otag, *opacket->obj, iblocking);
    opacket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_retval = Py_BuildValue((char *) "iiN", retval, otag, opacket);
    return py_retval;
}


PyObject *
_wrap_PyMRNStream_clear_DataNotificationFd(PyMRNStream *self)
{
    PyObject *py_retval;

    self->obj->clear_DataNotificationFd();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyMRNStream_get_EndPoints(PyMRNStream *self)
{
    PyObject *py_retval;
    std::set< uint32_t > retval;
    Pystd__set__lt__uint32_t__gt__ *py_std__set__lt__uint32_t__gt__;

    retval = self->obj->get_EndPoints();
    py_std__set__lt__uint32_t__gt__ = PyObject_New(Pystd__set__lt__uint32_t__gt__, &Pystd__set__lt__uint32_t__gt___Type);
    py_std__set__lt__uint32_t__gt__->obj = new std::set<uint32_t>(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__set__lt__uint32_t__gt__);
    return py_retval;
}


PyObject *
_wrap_PyMRNStream_size(PyMRNStream *self)
{
    PyObject *py_retval;
    unsigned int retval;

    retval = self->obj->size();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

static PyMethodDef PyMRNStream_methods[] = {
    {(char *) "is_Closed", (PyCFunction) _wrap_PyMRNStream_is_Closed, METH_NOARGS, NULL },
    {(char *) "send", (PyCFunction) _wrap_PyMRNStream_send, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "get_Id", (PyCFunction) _wrap_PyMRNStream_get_Id, METH_NOARGS, NULL },
    {(char *) "get_DataNotificationFd", (PyCFunction) _wrap_PyMRNStream_get_DataNotificationFd, METH_NOARGS, NULL },
    {(char *) "flush", (PyCFunction) _wrap_PyMRNStream_flush, METH_NOARGS, NULL },
    {(char *) "close_DataNotificationFd", (PyCFunction) _wrap_PyMRNStream_close_DataNotificationFd, METH_NOARGS, NULL },
    {(char *) "set_FilterParameters", (PyCFunction) _wrap_PyMRNStream_set_FilterParameters, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "has_Data", (PyCFunction) _wrap_PyMRNStream_has_Data, METH_NOARGS, NULL },
    {(char *) "recv", (PyCFunction) _wrap_PyMRNStream_recv, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "clear_DataNotificationFd", (PyCFunction) _wrap_PyMRNStream_clear_DataNotificationFd, METH_NOARGS, NULL },
    {(char *) "get_EndPoints", (PyCFunction) _wrap_PyMRNStream_get_EndPoints, METH_NOARGS, NULL },
    {(char *) "size", (PyCFunction) _wrap_PyMRNStream_size, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyMRNStream__tp_dealloc(PyMRNStream *self)
{
        MRN::Stream *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyMRNStream__tp_richcompare (PyMRNStream *PYBINDGEN_UNUSED(self), PyMRNStream *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyMRNStream_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyMRNStream_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.MRN.Stream",            /* tp_name */
    sizeof(PyMRNStream),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyMRNStream__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyMRNStream__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyMRNStream_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyMRNStream__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyMRNNetwork__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'Network' cannot be constructed ()");
    return -1;
}


PyObject *
_wrap_PyMRNNetwork_is_LocalNodeBackEnd(PyMRNNetwork *self)
{
    PyObject *py_retval;
    bool retval;

    retval = self->obj->is_LocalNodeBackEnd();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_get_NetworkTopology(PyMRNNetwork *self)
{
    PyObject *py_retval;
    MRN::NetworkTopology *retval;
    PyMRNNetworkTopology *py_NetworkTopology;

    retval = self->obj->get_NetworkTopology();
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_NetworkTopology = PyObject_New(PyMRNNetworkTopology, &PyMRNNetworkTopology_Type);
    py_NetworkTopology->obj = retval;
    py_NetworkTopology->flags = PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED;
    py_retval = Py_BuildValue((char *) "N", py_NetworkTopology);
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_num_EventsPending(PyMRNNetwork *self)
{
    PyObject *py_retval;
    unsigned int retval;

    retval = self->obj->num_EventsPending();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_get_EventNotificationFd(PyMRNNetwork *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    int etype;
    const char *keywords[] = {"etype", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &etype)) {
        return NULL;
    }
    retval = self->obj->get_EventNotificationFd(etype);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_print_error(PyMRNNetwork *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char const *msg;
    const char *keywords[] = {"msg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s", (char **) keywords, &msg)) {
        return NULL;
    }
    self->obj->print_error(msg);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_is_ShutDown(PyMRNNetwork *self)
{
    PyObject *py_retval;
    bool retval;

    retval = self->obj->is_ShutDown();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_is_LocalNodeParent(PyMRNNetwork *self)
{
    PyObject *py_retval;
    bool retval;

    retval = self->obj->is_LocalNodeParent();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_flush(PyMRNNetwork *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->flush();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_close_EventNotificationFd(PyMRNNetwork *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int etype;
    const char *keywords[] = {"etype", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &etype)) {
        return NULL;
    }
    self->obj->close_EventNotificationFd(etype);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_waitfor_ShutDown(PyMRNNetwork *self)
{
    PyObject *py_retval;

    self->obj->waitfor_ShutDown();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_get_Stream(PyMRNNetwork *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    MRN::Stream *retval;
    unsigned int iid;
    const char *keywords[] = {"iid", NULL};
    PyMRNStream *py_Stream;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &iid)) {
        return NULL;
    }
    retval = self->obj->get_Stream(iid);
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Stream = PyObject_New(PyMRNStream, &PyMRNStream_Type);
    py_Stream->obj = new MRN::Stream((*retval));
    py_Stream->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_retval = Py_BuildValue((char *) "N", py_Stream);
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_CreateNetworkBE(PyMRNNetwork *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    MRN::Network *retval;
    int argc;
    PyObject *_argv;
    char **argv;
    const char *keywords[] = {"argc", "argv", NULL};
    PyMRNNetwork *py_Network;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO", (char **) keywords, &argc, &_argv)) {
        return NULL;
    }
    argv = layout_argv(_argv);
    if (!argv) return NULL;
    retval = MRN::Network::CreateNetworkBE(argc, argv);
    layout_argv_cleanup(argv);
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Network = PyObject_New(PyMRNNetwork, &PyMRNNetwork_Type);
    py_Network->obj = retval;
    py_Network->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_retval = Py_BuildValue((char *) "N", py_Network);
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_register_EventCallback(PyMRNNetwork *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int iclass;
    int ityp;
    PyObject *ifunc;
    bool onetime;
    PyObject *py_onetime = NULL;
    const char *keywords[] = {"iclass", "ityp", "ifunc", "onetime", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iiO|O", (char **) keywords, &iclass, &ityp, &ifunc, &py_onetime)) {
        return NULL;
    }
    if (!PyCallable_Check(ifunc)) {
        PyErr_SetString(PyExc_TypeError, "Callback parameter must be callable.");
        return NULL;
    }
    Py_INCREF(ifunc);
    onetime = py_onetime? (bool) PyObject_IsTrue(py_onetime) : false;
    retval = self->obj->register_EventCallback(iclass, ityp, &_wrap_EventCallback, ifunc, onetime);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_send(PyMRNNetwork *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    unsigned int ibe;
    int tag;
    char const *iformat_str;
    char const *serialized;
    const char *keywords[] = {"ibe", "tag", "iformat_str", "serialized", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "Iiss", (char **) keywords, &ibe, &tag, &iformat_str, &serialized)) {
        return NULL;
    }
    retval = self->obj->send(ibe, tag, iformat_str, serialized);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_print_PerformanceData(PyMRNNetwork *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    MRN::perfdata_metric_t metric;
    MRN::perfdata_context_t context;
    const char *keywords[] = {"metric", "context", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &metric, &context)) {
        return NULL;
    }
    self->obj->print_PerformanceData(metric, context);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_next_Event(PyMRNNetwork *self)
{
    PyObject *py_retval;
    MRN::Event *retval;
    PyMRNEvent *py_Event;

    retval = self->obj->next_Event();
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Event = PyObject_New(PyMRNEvent, &PyMRNEvent_Type);
    py_Event->obj = retval;
    py_Event->flags = PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED;
    py_retval = Py_BuildValue((char *) "N", py_Event);
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_load_FilterFunc(PyMRNNetwork *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    char const *so_file;
    char const *func;
    const char *keywords[] = {"so_file", "func", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ss", (char **) keywords, &so_file, &func)) {
        return NULL;
    }
    retval = self->obj->load_FilterFunc(so_file, func);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_get_LocalRank(PyMRNNetwork *self)
{
    PyObject *py_retval;
    uint32_t retval;

    retval = self->obj->get_LocalRank();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_disable_PerformanceData(PyMRNNetwork *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    MRN::perfdata_metric_t metric;
    MRN::perfdata_context_t context;
    const char *keywords[] = {"metric", "context", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &metric, &context)) {
        return NULL;
    }
    retval = self->obj->disable_PerformanceData(metric, context);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}



PyObject *
_wrap_PyMRNNetwork_CreateNetworkFE__0(PyMRNNetwork *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    MRN::Network *retval;
    char const *topology;
    char const *backend_exe;
    PyObject *_backend_argv;
    char **backend_argv;
    std::map<std::string, std::string> attrs_value;
    bool rank_backends;
    PyObject *py_rank_backends = NULL;
    bool using_memory_buffer;
    PyObject *py_using_memory_buffer = NULL;
    const char *keywords[] = {"topology", "backend_exe", "backend_argv", "attrs", "rank_backends", "using_memory_buffer", NULL};
    PyMRNNetwork *py_Network;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ssOO&|OO", (char **) keywords, &topology, &backend_exe, &_backend_argv, _wrap_convert_py2c__std__map__lt___std__string__std__string___gt__, &attrs_value, &py_rank_backends, &py_using_memory_buffer)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    backend_argv = layout_argv(_backend_argv);
    if (!backend_argv) return NULL;
    rank_backends = py_rank_backends? (bool) PyObject_IsTrue(py_rank_backends) : true;
    using_memory_buffer = py_using_memory_buffer? (bool) PyObject_IsTrue(py_using_memory_buffer) : false;
    retval = MRN::Network::CreateNetworkFE(topology, backend_exe, (const char**) backend_argv, &attrs_value, rank_backends, using_memory_buffer);
    layout_argv_cleanup(backend_argv);
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Network = PyObject_New(PyMRNNetwork, &PyMRNNetwork_Type);
    py_Network->obj = retval;
    py_Network->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_retval = Py_BuildValue((char *) "N", py_Network);
    return py_retval;
}

PyObject *
_wrap_PyMRNNetwork_CreateNetworkFE__1(PyMRNNetwork *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    MRN::Network *retval;
    char const *topology;
    char const *backend_exe = NULL;
    char **backend_argv = NULL;
    const char *keywords[] = {"topology", "backend_exe", NULL};
    PyMRNNetwork *py_Network;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s|s", (char **) keywords, &topology, &backend_exe)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = MRN::Network::CreateNetworkFE(topology, backend_exe, (const char**) backend_argv);
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Network = PyObject_New(PyMRNNetwork, &PyMRNNetwork_Type);
    py_Network->obj = retval;
    py_Network->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_retval = Py_BuildValue((char *) "N", py_Network);
    return py_retval;
}

PyObject *
_wrap_PyMRNNetwork_CreateNetworkFE__2(PyMRNNetwork *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    MRN::Network *retval;
    char const *topology;
    char const *backend_exe;
    PyObject *_backend_argv;
    char **backend_argv;
    const char *keywords[] = {"topology", "backend_exe", "backend_argv", NULL};
    PyMRNNetwork *py_Network;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ssO", (char **) keywords, &topology, &backend_exe, &_backend_argv)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    backend_argv = layout_argv(_backend_argv);
    if (!backend_argv) return NULL;
    retval = MRN::Network::CreateNetworkFE(topology, backend_exe, (const char**) backend_argv);
    layout_argv_cleanup(backend_argv);
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Network = PyObject_New(PyMRNNetwork, &PyMRNNetwork_Type);
    py_Network->obj = retval;
    py_Network->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_retval = Py_BuildValue((char *) "N", py_Network);
    return py_retval;
}

PyObject * _wrap_PyMRNNetwork_CreateNetworkFE(PyMRNNetwork *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyMRNNetwork_CreateNetworkFE__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyMRNNetwork_CreateNetworkFE__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyMRNNetwork_CreateNetworkFE__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyMRNNetwork_new_Communicator__0(PyMRNNetwork *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    MRN::Communicator *retval;
    const char *keywords[] = {NULL};
    PyMRNCommunicator *py_Communicator;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->new_Communicator();
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Communicator = PyObject_New(PyMRNCommunicator, &PyMRNCommunicator_Type);
    py_Communicator->obj = retval;
    py_Communicator->flags = PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED;
    py_retval = Py_BuildValue((char *) "N", py_Communicator);
    return py_retval;
}

PyObject *
_wrap_PyMRNNetwork_new_Communicator__1(PyMRNNetwork *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    MRN::Communicator *retval;
    PyMRNCommunicator *communicator;
    const char *keywords[] = {"communicator", NULL};
    PyMRNCommunicator *py_Communicator;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyMRNCommunicator_Type, &communicator)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->new_Communicator(*((PyMRNCommunicator *) communicator)->obj);
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Communicator = PyObject_New(PyMRNCommunicator, &PyMRNCommunicator_Type);
    py_Communicator->obj = retval;
    py_Communicator->flags = PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED;
    py_retval = Py_BuildValue((char *) "N", py_Communicator);
    return py_retval;
}

PyObject *
_wrap_PyMRNNetwork_new_Communicator__2(PyMRNNetwork *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    MRN::Communicator *retval;
    std::set<uint32_t> set_value;
    const char *keywords[] = {"set", NULL};
    PyMRNCommunicator *py_Communicator;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__set__lt___uint32_t___gt__, &set_value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->new_Communicator(set_value);
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Communicator = PyObject_New(PyMRNCommunicator, &PyMRNCommunicator_Type);
    py_Communicator->obj = retval;
    py_Communicator->flags = PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED;
    py_retval = Py_BuildValue((char *) "N", py_Communicator);
    return py_retval;
}

PyObject *
_wrap_PyMRNNetwork_new_Communicator__3(PyMRNNetwork *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    MRN::Communicator *retval;
    std::set<MRN::CommunicationNode*> set_value;
    const char *keywords[] = {"set", NULL};
    PyMRNCommunicator *py_Communicator;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__set__lt___MRN__CommunicationNode___star_____gt__, &set_value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->new_Communicator(set_value);
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Communicator = PyObject_New(PyMRNCommunicator, &PyMRNCommunicator_Type);
    py_Communicator->obj = retval;
    py_Communicator->flags = PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED;
    py_retval = Py_BuildValue((char *) "N", py_Communicator);
    return py_retval;
}

PyObject * _wrap_PyMRNNetwork_new_Communicator(PyMRNNetwork *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[4] = {0,};
    retval = _wrap_PyMRNNetwork_new_Communicator__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyMRNNetwork_new_Communicator__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyMRNNetwork_new_Communicator__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyMRNNetwork_new_Communicator__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    error_list = PyList_New(4);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyMRNNetwork_is_LocalNodeInternal(PyMRNNetwork *self)
{
    PyObject *py_retval;
    bool retval;

    retval = self->obj->is_LocalNodeInternal();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_get_EndPoint(PyMRNNetwork *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    MRN::CommunicationNode *retval;
    unsigned int rank;
    const char *keywords[] = {"rank", NULL};
    PyMRNCommunicationNode *py_CommunicationNode;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &rank)) {
        return NULL;
    }
    retval = self->obj->get_EndPoint(rank);
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_CommunicationNode = PyObject_New(PyMRNCommunicationNode, &PyMRNCommunicationNode_Type);
    py_CommunicationNode->obj = retval;
    py_CommunicationNode->flags = PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED;
    py_retval = Py_BuildValue((char *) "N", py_CommunicationNode);
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_get_BroadcastCommunicator(PyMRNNetwork *self)
{
    PyObject *py_retval;
    MRN::Communicator *retval;
    PyMRNCommunicator *py_Communicator;

    retval = self->obj->get_BroadcastCommunicator();
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Communicator = PyObject_New(PyMRNCommunicator, &PyMRNCommunicator_Type);
    py_Communicator->obj = retval;
    py_Communicator->flags = PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED;
    py_retval = Py_BuildValue((char *) "N", py_Communicator);
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_recv(PyMRNNetwork *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    int  otag;
    PyMRNPacketPtr *opacket;
    PyMRNStream *ostream;
    bool iblocking;
    PyObject *py_iblocking = NULL;
    const char *keywords[] = {"iblocking", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &py_iblocking)) {
        return NULL;
    }
    opacket = PyObject_New(PyMRNPacketPtr, &PyMRNPacketPtr_Type);
    opacket->obj = new MRN::PacketPtr();
    ostream = PyObject_New(PyMRNStream, &PyMRNStream_Type);
    ostream->flags = PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED;
    iblocking = py_iblocking? (bool) PyObject_IsTrue(py_iblocking) : true;
    retval = self->obj->recv(&otag, *opacket->obj, &(ostream->obj), iblocking);
    opacket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    if (!ostream) {
    	return Py_BuildValue((char*) "iOOO", retval, Py_None, Py_None, Py_None);
    }
    py_retval = Py_BuildValue((char *) "iiNN", retval, otag, opacket, ostream);
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_clear_Events(PyMRNNetwork *self)
{
    PyObject *py_retval;

    self->obj->clear_Events();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyMRNNetwork_new_Stream__0(PyMRNNetwork *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    MRN::Stream *retval;
    PyMRNCommunicator *communicator;
    MRN::Communicator *communicator_ptr;
    int us_filter_id;
    int sync_id;
    int ds_filter_id;
    const char *keywords[] = {"communicator", "us_filter_id", "sync_id", "ds_filter_id", NULL};
    PyMRNStream *py_Stream;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!iii", (char **) keywords, &PyMRNCommunicator_Type, &communicator, &us_filter_id, &sync_id, &ds_filter_id)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    communicator_ptr = (communicator ? communicator->obj : NULL);
    retval = self->obj->new_Stream(communicator_ptr, us_filter_id, sync_id, ds_filter_id);
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Stream = PyObject_New(PyMRNStream, &PyMRNStream_Type);
    py_Stream->obj = new MRN::Stream((*retval));
    py_Stream->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_retval = Py_BuildValue((char *) "N", py_Stream);
    return py_retval;
}

PyObject *
_wrap_PyMRNNetwork_new_Stream__1(PyMRNNetwork *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    MRN::Stream *retval;
    PyMRNCommunicator *communicator;
    MRN::Communicator *communicator_ptr;
    const char *us_filters;
    Py_ssize_t us_filters_len;
    const char *sync_filters;
    Py_ssize_t sync_filters_len;
    const char *ds_filters;
    Py_ssize_t ds_filters_len;
    const char *keywords[] = {"communicator", "us_filters", "sync_filters", "ds_filters", NULL};
    PyMRNStream *py_Stream;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#s#s#", (char **) keywords, &PyMRNCommunicator_Type, &communicator, &us_filters, &us_filters_len, &sync_filters, &sync_filters_len, &ds_filters, &ds_filters_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    communicator_ptr = (communicator ? communicator->obj : NULL);
    retval = self->obj->new_Stream(communicator_ptr, std::string(us_filters, us_filters_len), std::string(sync_filters, sync_filters_len), std::string(ds_filters, ds_filters_len));
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Stream = PyObject_New(PyMRNStream, &PyMRNStream_Type);
    py_Stream->obj = new MRN::Stream((*retval));
    py_Stream->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_retval = Py_BuildValue((char *) "N", py_Stream);
    return py_retval;
}

PyObject * _wrap_PyMRNNetwork_new_Stream(PyMRNNetwork *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyMRNNetwork_new_Stream__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyMRNNetwork_new_Stream__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyMRNNetwork_set_FailureRecovery(PyMRNNetwork *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    bool enable_recovery;
    PyObject *py_enable_recovery;
    const char *keywords[] = {"enable_recovery", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable_recovery)) {
        return NULL;
    }
    enable_recovery = (bool) PyObject_IsTrue(py_enable_recovery);
    retval = self->obj->set_FailureRecovery(enable_recovery);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_get_LocalPort(PyMRNNetwork *self)
{
    PyObject *py_retval;
    uint16_t retval;

    retval = self->obj->get_LocalPort();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_is_LocalNodeFrontEnd(PyMRNNetwork *self)
{
    PyObject *py_retval;
    bool retval;

    retval = self->obj->is_LocalNodeFrontEnd();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_remove_EventCallbacks(PyMRNNetwork *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int iclass;
    int ityp;
    const char *keywords[] = {"iclass", "ityp", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &iclass, &ityp)) {
        return NULL;
    }
    retval = self->obj->remove_EventCallbacks(iclass, ityp);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_is_LocalNodeChild(PyMRNNetwork *self)
{
    PyObject *py_retval;
    bool retval;

    retval = self->obj->is_LocalNodeChild();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_clear_EventNotificationFd(PyMRNNetwork *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int etype;
    const char *keywords[] = {"etype", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &etype)) {
        return NULL;
    }
    self->obj->clear_EventNotificationFd(etype);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_enable_PerformanceData(PyMRNNetwork *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    MRN::perfdata_metric_t metric;
    MRN::perfdata_context_t context;
    const char *keywords[] = {"metric", "context", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &metric, &context)) {
        return NULL;
    }
    retval = self->obj->enable_PerformanceData(metric, context);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyMRNNetwork_get_LocalHostName(PyMRNNetwork *self)
{
    PyObject *py_retval;
    std::string retval;

    retval = self->obj->get_LocalHostName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}

static PyMethodDef PyMRNNetwork_methods[] = {
    {(char *) "is_LocalNodeBackEnd", (PyCFunction) _wrap_PyMRNNetwork_is_LocalNodeBackEnd, METH_NOARGS, NULL },
    {(char *) "get_NetworkTopology", (PyCFunction) _wrap_PyMRNNetwork_get_NetworkTopology, METH_NOARGS, NULL },
    {(char *) "num_EventsPending", (PyCFunction) _wrap_PyMRNNetwork_num_EventsPending, METH_NOARGS, NULL },
    {(char *) "get_EventNotificationFd", (PyCFunction) _wrap_PyMRNNetwork_get_EventNotificationFd, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "print_error", (PyCFunction) _wrap_PyMRNNetwork_print_error, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "is_ShutDown", (PyCFunction) _wrap_PyMRNNetwork_is_ShutDown, METH_NOARGS, NULL },
    {(char *) "is_LocalNodeParent", (PyCFunction) _wrap_PyMRNNetwork_is_LocalNodeParent, METH_NOARGS, NULL },
    {(char *) "flush", (PyCFunction) _wrap_PyMRNNetwork_flush, METH_NOARGS, NULL },
    {(char *) "close_EventNotificationFd", (PyCFunction) _wrap_PyMRNNetwork_close_EventNotificationFd, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "waitfor_ShutDown", (PyCFunction) _wrap_PyMRNNetwork_waitfor_ShutDown, METH_NOARGS, NULL },
    {(char *) "get_Stream", (PyCFunction) _wrap_PyMRNNetwork_get_Stream, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "CreateNetworkBE", (PyCFunction) _wrap_PyMRNNetwork_CreateNetworkBE, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "register_EventCallback", (PyCFunction) _wrap_PyMRNNetwork_register_EventCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "send", (PyCFunction) _wrap_PyMRNNetwork_send, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "print_PerformanceData", (PyCFunction) _wrap_PyMRNNetwork_print_PerformanceData, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "next_Event", (PyCFunction) _wrap_PyMRNNetwork_next_Event, METH_NOARGS, NULL },
    {(char *) "load_FilterFunc", (PyCFunction) _wrap_PyMRNNetwork_load_FilterFunc, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "get_LocalRank", (PyCFunction) _wrap_PyMRNNetwork_get_LocalRank, METH_NOARGS, NULL },
    {(char *) "disable_PerformanceData", (PyCFunction) _wrap_PyMRNNetwork_disable_PerformanceData, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "CreateNetworkFE", (PyCFunction) _wrap_PyMRNNetwork_CreateNetworkFE, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "new_Communicator", (PyCFunction) _wrap_PyMRNNetwork_new_Communicator, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "is_LocalNodeInternal", (PyCFunction) _wrap_PyMRNNetwork_is_LocalNodeInternal, METH_NOARGS, NULL },
    {(char *) "get_EndPoint", (PyCFunction) _wrap_PyMRNNetwork_get_EndPoint, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "get_BroadcastCommunicator", (PyCFunction) _wrap_PyMRNNetwork_get_BroadcastCommunicator, METH_NOARGS, NULL },
    {(char *) "recv", (PyCFunction) _wrap_PyMRNNetwork_recv, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "clear_Events", (PyCFunction) _wrap_PyMRNNetwork_clear_Events, METH_NOARGS, NULL },
    {(char *) "new_Stream", (PyCFunction) _wrap_PyMRNNetwork_new_Stream, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "set_FailureRecovery", (PyCFunction) _wrap_PyMRNNetwork_set_FailureRecovery, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "get_LocalPort", (PyCFunction) _wrap_PyMRNNetwork_get_LocalPort, METH_NOARGS, NULL },
    {(char *) "is_LocalNodeFrontEnd", (PyCFunction) _wrap_PyMRNNetwork_is_LocalNodeFrontEnd, METH_NOARGS, NULL },
    {(char *) "remove_EventCallbacks", (PyCFunction) _wrap_PyMRNNetwork_remove_EventCallbacks, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "is_LocalNodeChild", (PyCFunction) _wrap_PyMRNNetwork_is_LocalNodeChild, METH_NOARGS, NULL },
    {(char *) "clear_EventNotificationFd", (PyCFunction) _wrap_PyMRNNetwork_clear_EventNotificationFd, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "enable_PerformanceData", (PyCFunction) _wrap_PyMRNNetwork_enable_PerformanceData, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "get_LocalHostName", (PyCFunction) _wrap_PyMRNNetwork_get_LocalHostName, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyMRNNetwork__tp_dealloc(PyMRNNetwork *self)
{
        MRN::Network *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyMRNNetwork__tp_richcompare (PyMRNNetwork *PYBINDGEN_UNUSED(self), PyMRNNetwork *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyMRNNetwork_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyMRNNetwork_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.MRN.Network",            /* tp_name */
    sizeof(PyMRNNetwork),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyMRNNetwork__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyMRNNetwork__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyMRNNetwork_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyMRNNetwork__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyMRNPacketPtr__tp_init__0(PyMRNPacketPtr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new MRN::PacketPtr();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyMRNPacketPtr__tp_init__1(PyMRNPacketPtr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyMRNPacket *packet;
    MRN::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyMRNPacket_Type, &packet)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj = new MRN::PacketPtr(packet_ptr);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    if (packet) {
        packet->obj = NULL;
    }
    return 0;
}

int _wrap_PyMRNPacketPtr__tp_init(PyMRNPacketPtr *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyMRNPacketPtr__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyMRNPacketPtr__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyMRNPacketPtr_get(PyMRNPacketPtr *self)
{
    PyObject *py_retval;
    MRN::Packet *retval;
    PyMRNPacket *py_Packet;

    retval = self->obj->get();
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Packet = PyObject_New(PyMRNPacket, &PyMRNPacket_Type);
    py_Packet->obj = retval;
    py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED;
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}

static PyMethodDef PyMRNPacketPtr_methods[] = {
    {(char *) "get", (PyCFunction) _wrap_PyMRNPacketPtr_get, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyMRNPacketPtr__tp_dealloc(PyMRNPacketPtr *self)
{
        MRN::PacketPtr *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyMRNPacketPtr__tp_richcompare (PyMRNPacketPtr *PYBINDGEN_UNUSED(self), PyMRNPacketPtr *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyMRNPacketPtr_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyMRNPacketPtr_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.MRN.PacketPtr",            /* tp_name */
    sizeof(PyMRNPacketPtr),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyMRNPacketPtr__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyMRNPacketPtr__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyMRNPacketPtr_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyMRNPacketPtr__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyMRNEventData__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'EventData' cannot be constructed ()");
    return -1;
}

static PyMethodDef PyMRNEventData_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyMRNEventData__tp_dealloc(PyMRNEventData *self)
{
        MRN::EventData *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyMRNEventData__tp_richcompare (PyMRNEventData *PYBINDGEN_UNUSED(self), PyMRNEventData *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyMRNEventData_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyMRNEventData_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.MRN.EventData",            /* tp_name */
    sizeof(PyMRNEventData),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyMRNEventData__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyMRNEventData__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyMRNEventData_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyMRNEventData__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyMRNErrorDef__get_code(PyMRNErrorDef *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", self->obj->code);
    return py_retval;
}
static int _wrap_PyMRNErrorDef__set_code(PyMRNErrorDef *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->code)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyMRNErrorDef__get_level(PyMRNErrorDef *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", self->obj->level);
    return py_retval;
}
static int _wrap_PyMRNErrorDef__set_level(PyMRNErrorDef *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->level)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyMRNErrorDef__get_response(PyMRNErrorDef *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", self->obj->response);
    return py_retval;
}
static int _wrap_PyMRNErrorDef__set_response(PyMRNErrorDef *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->response)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyMRNErrorDef__get_msg(PyMRNErrorDef *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "s", self->obj->msg);
    return py_retval;
}
static int _wrap_PyMRNErrorDef__set_msg(PyMRNErrorDef *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "s", &self->obj->msg)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyMRNErrorDef__getsets[] = {
    {
        (char*) "msg", /* attribute name */
        (getter) _wrap_PyMRNErrorDef__get_msg, /* C function to get the attribute */
        (setter) _wrap_PyMRNErrorDef__set_msg, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "code", /* attribute name */
        (getter) _wrap_PyMRNErrorDef__get_code, /* C function to get the attribute */
        (setter) _wrap_PyMRNErrorDef__set_code, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "response", /* attribute name */
        (getter) _wrap_PyMRNErrorDef__get_response, /* C function to get the attribute */
        (setter) _wrap_PyMRNErrorDef__set_response, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "level", /* attribute name */
        (getter) _wrap_PyMRNErrorDef__get_level, /* C function to get the attribute */
        (setter) _wrap_PyMRNErrorDef__set_level, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyMRNErrorDef__tp_init__0(PyMRNErrorDef *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new MRN::ErrorDef();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyMRNErrorDef__tp_init__1(PyMRNErrorDef *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyMRNErrorDef *ctor_arg;
    const char *keywords[] = {"ctor_arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyMRNErrorDef_Type, &ctor_arg)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new MRN::ErrorDef(*((PyMRNErrorDef *) ctor_arg)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyMRNErrorDef__tp_init(PyMRNErrorDef *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyMRNErrorDef__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyMRNErrorDef__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyMRNErrorDef__copy__(PyMRNErrorDef *self)
{

    PyMRNErrorDef *py_copy;
    py_copy = PyObject_New(PyMRNErrorDef, &PyMRNErrorDef_Type);
    py_copy->obj = new MRN::ErrorDef(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyMRNErrorDef_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyMRNErrorDef__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyMRNErrorDef__tp_dealloc(PyMRNErrorDef *self)
{
        MRN::ErrorDef *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyMRNErrorDef__tp_richcompare (PyMRNErrorDef *PYBINDGEN_UNUSED(self), PyMRNErrorDef *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyMRNErrorDef_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyMRNErrorDef_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.MRN.ErrorDef",            /* tp_name */
    sizeof(PyMRNErrorDef),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyMRNErrorDef__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyMRNErrorDef__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyMRNErrorDef_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyMRNErrorDef__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyMRNErrorDef__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- enumerations --- */
















static PyObject *
initMRNet_MRN(void)
{
    PyObject *m;
    m = Py_InitModule3((char *) "MRNet.MRN", MRNet_MRN_functions, NULL);
    if (m == NULL) {
        return NULL;
    }
    /* Register the 'MRN::CommunicationNode' class */
    if (PyType_Ready(&PyMRNCommunicationNode_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "CommunicationNode", (PyObject *) &PyMRNCommunicationNode_Type);
    /* Register the 'MRN::Communicator' class */
    if (PyType_Ready(&PyMRNCommunicator_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Communicator", (PyObject *) &PyMRNCommunicator_Type);
    /* Register the 'MRN::Error' class */
    if (PyType_Ready(&PyMRNError_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Error", (PyObject *) &PyMRNError_Type);
    /* Register the 'MRN::Event' class */

    PyMRNEventMeta_Type.tp_base = PyBaseObject_Type.ob_type;
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyMRNEventMeta_Type.tp_traverse = PyBaseObject_Type.ob_type->tp_traverse;
    PyMRNEventMeta_Type.tp_clear = PyBaseObject_Type.ob_type->tp_clear;
    PyMRNEventMeta_Type.tp_is_gc = PyBaseObject_Type.ob_type->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyMRNEventMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyMRNEventMeta_Type);

    PyMRNEvent_Type.ob_type = &PyMRNEventMeta_Type;
    if (PyType_Ready(&PyMRNEvent_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Event", (PyObject *) &PyMRNEvent_Type);
    /* Register the 'MRN::DataEvent' class */

    PyMRNDataEventMeta_Type.tp_base = PyMRNEvent_Type.ob_type;
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyMRNDataEventMeta_Type.tp_traverse = PyMRNEvent_Type.ob_type->tp_traverse;
    PyMRNDataEventMeta_Type.tp_clear = PyMRNEvent_Type.ob_type->tp_clear;
    PyMRNDataEventMeta_Type.tp_is_gc = PyMRNEvent_Type.ob_type->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyMRNDataEventMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyMRNDataEventMeta_Type);

    PyMRNDataEvent_Type.tp_base = &PyMRNEvent_Type;
    PyMRNDataEvent_Type.ob_type = &PyMRNDataEventMeta_Type;
    if (PyType_Ready(&PyMRNDataEvent_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DataEvent", (PyObject *) &PyMRNDataEvent_Type);
    /* Register the 'MRN::ErrorEvent' class */

    PyMRNErrorEventMeta_Type.tp_base = PyMRNEvent_Type.ob_type;
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyMRNErrorEventMeta_Type.tp_traverse = PyMRNEvent_Type.ob_type->tp_traverse;
    PyMRNErrorEventMeta_Type.tp_clear = PyMRNEvent_Type.ob_type->tp_clear;
    PyMRNErrorEventMeta_Type.tp_is_gc = PyMRNEvent_Type.ob_type->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyMRNErrorEventMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyMRNErrorEventMeta_Type);

    PyMRNErrorEvent_Type.tp_base = &PyMRNEvent_Type;
    PyMRNErrorEvent_Type.ob_type = &PyMRNErrorEventMeta_Type;
    if (PyType_Ready(&PyMRNErrorEvent_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "ErrorEvent", (PyObject *) &PyMRNErrorEvent_Type);
    /* Register the 'MRN::TopologyEvent' class */

    PyMRNTopologyEventMeta_Type.tp_base = PyMRNEvent_Type.ob_type;
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyMRNTopologyEventMeta_Type.tp_traverse = PyMRNEvent_Type.ob_type->tp_traverse;
    PyMRNTopologyEventMeta_Type.tp_clear = PyMRNEvent_Type.ob_type->tp_clear;
    PyMRNTopologyEventMeta_Type.tp_is_gc = PyMRNEvent_Type.ob_type->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyMRNTopologyEventMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyMRNTopologyEventMeta_Type);

    PyMRNTopologyEvent_Type.tp_base = &PyMRNEvent_Type;
    PyMRNTopologyEvent_Type.ob_type = &PyMRNTopologyEventMeta_Type;
    if (PyType_Ready(&PyMRNTopologyEvent_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "TopologyEvent", (PyObject *) &PyMRNTopologyEvent_Type);
    /* Register the 'MRN::NetworkTopology' class */
    PyMRNNetworkTopology_Type.tp_base = &PyMRNError_Type;
    if (PyType_Ready(&PyMRNNetworkTopology_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "NetworkTopology", (PyObject *) &PyMRNNetworkTopology_Type);
    /* Register the 'MRN::NetworkTopology::Node' class */
    if (PyType_Ready(&PyMRNNetworkTopologyNode_Type)) {
        return NULL;
    }
    PyDict_SetItemString((PyObject*) PyMRNNetworkTopology_Type.tp_dict, (char *) "Node", (PyObject *) &PyMRNNetworkTopologyNode_Type);
    /* Register the 'MRN::Packet' class */
    PyMRNPacket_Type.tp_base = &PyMRNError_Type;
    if (PyType_Ready(&PyMRNPacket_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Packet", (PyObject *) &PyMRNPacket_Type);
    /* Register the 'MRN::Stream' class */
    if (PyType_Ready(&PyMRNStream_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Stream", (PyObject *) &PyMRNStream_Type);
    /* Register the 'MRN::Network' class */
    PyMRNNetwork_Type.tp_base = &PyMRNError_Type;
    if (PyType_Ready(&PyMRNNetwork_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Network", (PyObject *) &PyMRNNetwork_Type);
    /* Register the 'MRN::PacketPtr' class */
    if (PyType_Ready(&PyMRNPacketPtr_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "PacketPtr", (PyObject *) &PyMRNPacketPtr_Type);
    /* Register the 'MRN::EventData' class */
    if (PyType_Ready(&PyMRNEventData_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "EventData", (PyObject *) &PyMRNEventData_Type);
    /* Register the 'MRN::ErrorDef' class */
    if (PyType_Ready(&PyMRNErrorDef_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "ErrorDef", (PyObject *) &PyMRNErrorDef_Type);
    PyModule_AddIntConstant(m, (char *) "ERR_INFO", MRN::ERR_INFO);
    PyModule_AddIntConstant(m, (char *) "ERR_WARN", MRN::ERR_WARN);
    PyModule_AddIntConstant(m, (char *) "ERR_ERR", MRN::ERR_ERR);
    PyModule_AddIntConstant(m, (char *) "ERR_CRIT", MRN::ERR_CRIT);
    PyModule_AddIntConstant(m, (char *) "ERR_LEVEL_LAST", MRN::ERR_LEVEL_LAST);
    PyModule_AddIntConstant(m, (char *) "ERR_IGNORE", MRN::ERR_IGNORE);
    PyModule_AddIntConstant(m, (char *) "ERR_ALERT", MRN::ERR_ALERT);
    PyModule_AddIntConstant(m, (char *) "ERR_RETRY", MRN::ERR_RETRY);
    PyModule_AddIntConstant(m, (char *) "ERR_ABORT", MRN::ERR_ABORT);
    PyModule_AddIntConstant(m, (char *) "ERR_RESPONSE_LAST", MRN::ERR_RESPONSE_LAST);
    PyModule_AddIntConstant(m, (char *) "ERR_NONE", MRN::ERR_NONE);
    PyModule_AddIntConstant(m, (char *) "ERR_TOPOLOGY_FORMAT", MRN::ERR_TOPOLOGY_FORMAT);
    PyModule_AddIntConstant(m, (char *) "ERR_TOPOLOGY_CYCLE", MRN::ERR_TOPOLOGY_CYCLE);
    PyModule_AddIntConstant(m, (char *) "ERR_TOPOLOGY_NOTCONNECTED", MRN::ERR_TOPOLOGY_NOTCONNECTED);
    PyModule_AddIntConstant(m, (char *) "ERR_NETWORK_FAILURE", MRN::ERR_NETWORK_FAILURE);
    PyModule_AddIntConstant(m, (char *) "ERR_FORMATSTR", MRN::ERR_FORMATSTR);
    PyModule_AddIntConstant(m, (char *) "ERR_PACKING", MRN::ERR_PACKING);
    PyModule_AddIntConstant(m, (char *) "ERR_INTERNAL", MRN::ERR_INTERNAL);
    PyModule_AddIntConstant(m, (char *) "ERR_SYSTEM", MRN::ERR_SYSTEM);
    PyModule_AddIntConstant(m, (char *) "ERR_CODE_LAST", MRN::ERR_CODE_LAST);
    PyModule_AddIntConstant(m, (char *) "TFILTER_NULL", MRN::TFILTER_NULL);
    PyModule_AddIntConstant(m, (char *) "TFILTER_SUM", MRN::TFILTER_SUM);
    PyModule_AddIntConstant(m, (char *) "TFILTER_AVG", MRN::TFILTER_AVG);
    PyModule_AddIntConstant(m, (char *) "TFILTER_MIN", MRN::TFILTER_MIN);
    PyModule_AddIntConstant(m, (char *) "TFILTER_MAX", MRN::TFILTER_MAX);
    PyModule_AddIntConstant(m, (char *) "TFILTER_ARRAY_CONCAT", MRN::TFILTER_ARRAY_CONCAT);
    PyModule_AddIntConstant(m, (char *) "TFILTER_INT_EQ_CLASS", MRN::TFILTER_INT_EQ_CLASS);
    PyModule_AddIntConstant(m, (char *) "TFILTER_PERFDATA", MRN::TFILTER_PERFDATA);
    PyModule_AddIntConstant(m, (char *) "TFILTER_TOPO_UPDATE", MRN::TFILTER_TOPO_UPDATE);
    PyModule_AddIntConstant(m, (char *) "TFILTER_TOPO_UPDATE_DOWNSTREAM", MRN::TFILTER_TOPO_UPDATE_DOWNSTREAM);
    PyModule_AddIntConstant(m, (char *) "SFILTER_DONTWAIT", MRN::SFILTER_DONTWAIT);
    PyModule_AddIntConstant(m, (char *) "SFILTER_WAITFORALL", MRN::SFILTER_WAITFORALL);
    PyModule_AddIntConstant(m, (char *) "SFILTER_TIMEOUT", MRN::SFILTER_TIMEOUT);
    PyModule_AddIntConstant(m, (char *) "FILTER_DOWNSTREAM_TRANS", MRN::FILTER_DOWNSTREAM_TRANS);
    PyModule_AddIntConstant(m, (char *) "FILTER_UPSTREAM_TRANS", MRN::FILTER_UPSTREAM_TRANS);
    PyModule_AddIntConstant(m, (char *) "FILTER_UPSTREAM_SYNC", MRN::FILTER_UPSTREAM_SYNC);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_MET_NUM_BYTES", MRN::PERFDATA_MET_NUM_BYTES);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_MET_NUM_PKTS", MRN::PERFDATA_MET_NUM_PKTS);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_MET_ELAPSED_SEC", MRN::PERFDATA_MET_ELAPSED_SEC);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_MET_CPU_SYS_PCT", MRN::PERFDATA_MET_CPU_SYS_PCT);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_MET_CPU_USR_PCT", MRN::PERFDATA_MET_CPU_USR_PCT);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_MET_MEM_VIRT_KB", MRN::PERFDATA_MET_MEM_VIRT_KB);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_MET_MEM_PHYS_KB", MRN::PERFDATA_MET_MEM_PHYS_KB);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_MAX_MET", MRN::PERFDATA_MAX_MET);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_CTX_NONE", MRN::PERFDATA_CTX_NONE);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_CTX_SEND", MRN::PERFDATA_CTX_SEND);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_CTX_RECV", MRN::PERFDATA_CTX_RECV);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_CTX_FILT_IN", MRN::PERFDATA_CTX_FILT_IN);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_CTX_FILT_OUT", MRN::PERFDATA_CTX_FILT_OUT);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_CTX_SYNCFILT_IN", MRN::PERFDATA_CTX_SYNCFILT_IN);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_CTX_SYNCFILT_OUT", MRN::PERFDATA_CTX_SYNCFILT_OUT);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_CTX_PKT_RECV", MRN::PERFDATA_CTX_PKT_RECV);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_CTX_PKT_SEND", MRN::PERFDATA_CTX_PKT_SEND);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_CTX_PKT_NET_SENDCHILD", MRN::PERFDATA_CTX_PKT_NET_SENDCHILD);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_CTX_PKT_NET_SENDPAR", MRN::PERFDATA_CTX_PKT_NET_SENDPAR);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_CTX_PKT_INT_DATAPAR", MRN::PERFDATA_CTX_PKT_INT_DATAPAR);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_CTX_PKT_INT_DATACHILD", MRN::PERFDATA_CTX_PKT_INT_DATACHILD);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_CTX_PKT_FILTER", MRN::PERFDATA_CTX_PKT_FILTER);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_CTX_PKT_RECV_TO_FILTER", MRN::PERFDATA_CTX_PKT_RECV_TO_FILTER);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_CTX_PKT_FILTER_TO_SEND", MRN::PERFDATA_CTX_PKT_FILTER_TO_SEND);
    PyModule_AddIntConstant(m, (char *) "PERFDATA_MAX_CTX", MRN::PERFDATA_MAX_CTX);
    return m;
}
static PyMethodDef MRNet_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- containers --- */



static void
Pystd__map__lt__std__string__std__string__gt__Iter__tp_clear(Pystd__map__lt__std__string__std__string__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__map__lt__std__string__std__string__gt__Iter__tp_traverse(Pystd__map__lt__std__string__std__string__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__map__lt__std__string__std__string__gt____tp_dealloc(Pystd__map__lt__std__string__std__string__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__map__lt__std__string__std__string__gt__Iter__tp_dealloc(Pystd__map__lt__std__string__std__string__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__map__lt__std__string__std__string__gt____tp_iter(Pystd__map__lt__std__string__std__string__gt__ *self)
{
    Pystd__map__lt__std__string__std__string__gt__Iter *iter = PyObject_GC_New(Pystd__map__lt__std__string__std__string__gt__Iter, &Pystd__map__lt__std__string__std__string__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::map<std::string, std::string>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__map__lt__std__string__std__string__gt__Iter__tp_iter(Pystd__map__lt__std__string__std__string__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__map__lt__std__string__std__string__gt__Iter__tp_iternext(Pystd__map__lt__std__string__std__string__gt__Iter *self)
{
    PyObject *py_retval;
    std::map<std::string, std::string>::iterator iter;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "s#s#", (iter->first).c_str(), (iter->first).size(), (iter->second).c_str(), (iter->second).size());
    return py_retval;
}

int _wrap_convert_py2c__std__string(PyObject *value, std::string *address)
{
    PyObject *py_retval;
    const char *retval_ptr;
    Py_ssize_t retval_len;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "s#", &retval_ptr, &retval_len)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = std::string(retval_ptr, retval_len);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__map__lt___std__string__std__string___gt__(PyObject *arg, std::map<std::string, std::string> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__map__lt__std__string__std__string__gt___Type)) {
        *container = *((Pystd__map__lt__std__string__std__string__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            PyObject *tup = PyList_GET_ITEM(arg, i);
            if (!PyTuple_Check(tup) || PyTuple_Size(tup) != 2) {
                PyErr_SetString(PyExc_TypeError, "items must be tuples with two elements");
                return 0;
            }
            std::pair< std::string, std::string > item;
            if (!_wrap_convert_py2c__std__string(PyTuple_GET_ITEM(tup, 0), &item.first)) {
                return 0;
            }
            if (!_wrap_convert_py2c__std__string(PyTuple_GET_ITEM(tup, 1), &item.second)) {
                return 0;
            }
            container->insert(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__map__lt__std__string__std__string__gt__ instance, or a list of std::string");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__map__lt__std__string__std__string__gt____tp_init(Pystd__map__lt__std__string__std__string__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::map<std::string, std::string>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__map__lt___std__string__std__string___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__map__lt__std__string__std__string__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.Std__map__lt__std__string__std__string__gt__",            /* tp_name */
    sizeof(Pystd__map__lt__std__string__std__string__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__map__lt__std__string__std__string__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__map__lt__std__string__std__string__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__map__lt__std__string__std__string__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__map__lt__std__string__std__string__gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.Std__map__lt__std__string__std__string__gt__Iter",            /* tp_name */
    sizeof(Pystd__map__lt__std__string__std__string__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__map__lt__std__string__std__string__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__map__lt__std__string__std__string__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__map__lt__std__string__std__string__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__map__lt__std__string__std__string__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__map__lt__std__string__std__string__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter__tp_clear(Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter__tp_traverse(Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__set__lt__MRN__CommunicationNode__star____gt____tp_dealloc(Pystd__set__lt__MRN__CommunicationNode__star____gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter__tp_dealloc(Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__set__lt__MRN__CommunicationNode__star____gt____tp_iter(Pystd__set__lt__MRN__CommunicationNode__star____gt__ *self)
{
    Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter *iter = PyObject_GC_New(Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter, &Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::set<MRN::CommunicationNode*>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter__tp_iter(Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter__tp_iternext(Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter *self)
{
    PyObject *py_retval;
    std::set<MRN::CommunicationNode*>::iterator iter;
    PyMRNCommunicationNode *py_CommunicationNode;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    if (!((*iter))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_CommunicationNode = PyObject_New(PyMRNCommunicationNode, &PyMRNCommunicationNode_Type);
    py_CommunicationNode->obj = (*iter);
    py_CommunicationNode->flags = PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED;
    py_retval = Py_BuildValue((char *) "N", py_CommunicationNode);
    return py_retval;
}

int _wrap_convert_py2c__MRN__CommunicationNode___star__(PyObject *value, MRN::CommunicationNode * *address)
{
    PyObject *py_retval;
    PyMRNCommunicationNode *tmp_CommunicationNode;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyMRNCommunicationNode_Type, &tmp_CommunicationNode)) {
        Py_DECREF(py_retval);
        return 0;
    }
    // dangerous!
    *address = tmp_CommunicationNode->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__set__lt___MRN__CommunicationNode___star_____gt__(PyObject *arg, std::set<MRN::CommunicationNode*> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__set__lt__MRN__CommunicationNode__star____gt___Type)) {
        *container = *((Pystd__set__lt__MRN__CommunicationNode__star____gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            MRN::CommunicationNode * item;
            if (!_wrap_convert_py2c__MRN__CommunicationNode___star__(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->insert(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__set__lt__MRN__CommunicationNode__star____gt__ instance, or a list of MRN::CommunicationNode *");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__set__lt__MRN__CommunicationNode__star____gt____tp_init(Pystd__set__lt__MRN__CommunicationNode__star____gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::set<MRN::CommunicationNode*>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__set__lt___MRN__CommunicationNode___star_____gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__set__lt__MRN__CommunicationNode__star____gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.Std__set__lt__MRN__CommunicationNode__star____gt__",            /* tp_name */
    sizeof(Pystd__set__lt__MRN__CommunicationNode__star____gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__set__lt__MRN__CommunicationNode__star____gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__set__lt__MRN__CommunicationNode__star____gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__set__lt__MRN__CommunicationNode__star____gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.Std__set__lt__MRN__CommunicationNode__star____gt__Iter",            /* tp_name */
    sizeof(Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter__tp_clear(Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter__tp_traverse(Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__set__lt__MRN__NetworkTopology__Node__star____gt____tp_dealloc(Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter__tp_dealloc(Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__set__lt__MRN__NetworkTopology__Node__star____gt____tp_iter(Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__ *self)
{
    Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter *iter = PyObject_GC_New(Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter, &Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::set<MRN::NetworkTopology::Node*>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter__tp_iter(Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter__tp_iternext(Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter *self)
{
    PyObject *py_retval;
    std::set<MRN::NetworkTopology::Node*>::iterator iter;
    PyMRNNetworkTopologyNode *py_Node;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    if (!((*iter))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Node = PyObject_New(PyMRNNetworkTopologyNode, &PyMRNNetworkTopologyNode_Type);
    py_Node->obj = (*iter);
    py_Node->flags = PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED;
    py_retval = Py_BuildValue((char *) "N", py_Node);
    return py_retval;
}

int _wrap_convert_py2c__MRN__NetworkTopology__Node___star__(PyObject *value, MRN::NetworkTopology::Node * *address)
{
    PyObject *py_retval;
    PyMRNNetworkTopologyNode *tmp_Node;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyMRNNetworkTopologyNode_Type, &tmp_Node)) {
        Py_DECREF(py_retval);
        return 0;
    }
    // dangerous!
    *address = tmp_Node->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__set__lt___MRN__NetworkTopology__Node___star_____gt__(PyObject *arg, std::set<MRN::NetworkTopology::Node*> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__set__lt__MRN__NetworkTopology__Node__star____gt___Type)) {
        *container = *((Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            MRN::NetworkTopology::Node * item;
            if (!_wrap_convert_py2c__MRN__NetworkTopology__Node___star__(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->insert(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__set__lt__MRN__NetworkTopology__Node__star____gt__ instance, or a list of MRN::NetworkTopology::Node *");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__set__lt__MRN__NetworkTopology__Node__star____gt____tp_init(Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::set<MRN::NetworkTopology::Node*>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__set__lt___MRN__NetworkTopology__Node___star_____gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__set__lt__MRN__NetworkTopology__Node__star____gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.Std__set__lt__MRN__NetworkTopology__Node__star____gt__",            /* tp_name */
    sizeof(Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__set__lt__MRN__NetworkTopology__Node__star____gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__set__lt__MRN__NetworkTopology__Node__star____gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__set__lt__MRN__NetworkTopology__Node__star____gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.Std__set__lt__MRN__NetworkTopology__Node__star____gt__Iter",            /* tp_name */
    sizeof(Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter__tp_clear(Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter__tp_traverse(Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt____tp_dealloc(Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter__tp_dealloc(Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt____tp_iter(Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__ *self)
{
    Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter, &Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<MRN::NetworkTopology::Node*>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter__tp_iter(Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter__tp_iternext(Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<MRN::NetworkTopology::Node*>::iterator iter;
    PyMRNNetworkTopologyNode *py_Node;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    if (!((*iter))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Node = PyObject_New(PyMRNNetworkTopologyNode, &PyMRNNetworkTopologyNode_Type);
    py_Node->obj = (*iter);
    py_Node->flags = PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED;
    py_retval = Py_BuildValue((char *) "N", py_Node);
    return py_retval;
}

int _wrap_convert_py2c__std__vector__lt___MRN__NetworkTopology__Node___star_____gt__(PyObject *arg, std::vector<MRN::NetworkTopology::Node*> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt___Type)) {
        *container = *((Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            MRN::NetworkTopology::Node * item;
            if (!_wrap_convert_py2c__MRN__NetworkTopology__Node___star__(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__MRN__NetworkTopology__Node__star____gt__ instance, or a list of MRN::NetworkTopology::Node *");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt____tp_init(Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<MRN::NetworkTopology::Node*>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___MRN__NetworkTopology__Node___star_____gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.Std__vector__lt__MRN__NetworkTopology__Node__star____gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.Std__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__set__lt__uint32_t__gt__Iter__tp_clear(Pystd__set__lt__uint32_t__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__set__lt__uint32_t__gt__Iter__tp_traverse(Pystd__set__lt__uint32_t__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__set__lt__uint32_t__gt____tp_dealloc(Pystd__set__lt__uint32_t__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__set__lt__uint32_t__gt__Iter__tp_dealloc(Pystd__set__lt__uint32_t__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__set__lt__uint32_t__gt____tp_iter(Pystd__set__lt__uint32_t__gt__ *self)
{
    Pystd__set__lt__uint32_t__gt__Iter *iter = PyObject_GC_New(Pystd__set__lt__uint32_t__gt__Iter, &Pystd__set__lt__uint32_t__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::set<uint32_t>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__set__lt__uint32_t__gt__Iter__tp_iter(Pystd__set__lt__uint32_t__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__set__lt__uint32_t__gt__Iter__tp_iternext(Pystd__set__lt__uint32_t__gt__Iter *self)
{
    PyObject *py_retval;
    std::set<uint32_t>::iterator iter;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong((*iter)));
    return py_retval;
}

int _wrap_convert_py2c__uint32_t(PyObject *value, uint32_t *address)
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &*address)) {
        Py_DECREF(py_retval);
        return 0;
    }
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__set__lt___uint32_t___gt__(PyObject *arg, std::set<uint32_t> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__set__lt__uint32_t__gt___Type)) {
        *container = *((Pystd__set__lt__uint32_t__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            uint32_t item;
            if (!_wrap_convert_py2c__uint32_t(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->insert(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__set__lt__uint32_t__gt__ instance, or a list of uint32_t");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__set__lt__uint32_t__gt____tp_init(Pystd__set__lt__uint32_t__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::set<uint32_t>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__set__lt___uint32_t___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__set__lt__uint32_t__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.Std__set__lt__uint32_t__gt__",            /* tp_name */
    sizeof(Pystd__set__lt__uint32_t__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__set__lt__uint32_t__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__set__lt__uint32_t__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__set__lt__uint32_t__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__set__lt__uint32_t__gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.Std__set__lt__uint32_t__gt__Iter",            /* tp_name */
    sizeof(Pystd__set__lt__uint32_t__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__set__lt__uint32_t__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__set__lt__uint32_t__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__set__lt__uint32_t__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__set__lt__uint32_t__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__set__lt__uint32_t__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt__int__gt__Iter__tp_clear(Pystd__vector__lt__int__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt__int__gt__Iter__tp_traverse(Pystd__vector__lt__int__gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt__int__gt____tp_dealloc(Pystd__vector__lt__int__gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt__int__gt__Iter__tp_dealloc(Pystd__vector__lt__int__gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt__int__gt____tp_iter(Pystd__vector__lt__int__gt__ *self)
{
    Pystd__vector__lt__int__gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt__int__gt__Iter, &Pystd__vector__lt__int__gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector<int>::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt__int__gt__Iter__tp_iter(Pystd__vector__lt__int__gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt__int__gt__Iter__tp_iternext(Pystd__vector__lt__int__gt__Iter *self)
{
    PyObject *py_retval;
    std::vector<int>::iterator iter;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "i", (*iter));
    return py_retval;
}

int _wrap_convert_py2c__int(PyObject *value, int *address)
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &*address)) {
        Py_DECREF(py_retval);
        return 0;
    }
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___int___gt__(PyObject *arg, std::vector<int> *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt__int__gt___Type)) {
        *container = *((Pystd__vector__lt__int__gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            int item;
            if (!_wrap_convert_py2c__int(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt__int__gt__ instance, or a list of int");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt__int__gt____tp_init(Pystd__vector__lt__int__gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector<int>;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___int___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt__int__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.Std__vector__lt__int__gt__",            /* tp_name */
    sizeof(Pystd__vector__lt__int__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__int__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__int__gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt__int__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt__int__gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "MRNet.Std__vector__lt__int__gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt__int__gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt__int__gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt__int__gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt__int__gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt__int__gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt__int__gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyMODINIT_FUNC
#if defined(__GNUC__) && __GNUC__ >= 4
__attribute__ ((visibility("default")))
#endif
initMRNet(void)
{
    PyObject *m;
    PyObject *submodule;
    m = Py_InitModule3((char *) "MRNet", MRNet_functions, NULL);
    if (m == NULL) {
        return;
    }
    /* Register the 'std::map<std::string, std::string>' class */
    if (PyType_Ready(&Pystd__map__lt__std__string__std__string__gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__map__lt__std__string__std__string__gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__map__lt__std__string__std__string__gt__", (PyObject *) &Pystd__map__lt__std__string__std__string__gt___Type);
    PyModule_AddObject(m, (char *) "Std__map__lt__std__string__std__string__gt__Iter", (PyObject *) &Pystd__map__lt__std__string__std__string__gt__Iter_Type);
    /* Register the 'std::set<MRN::CommunicationNode*>' class */
    if (PyType_Ready(&Pystd__set__lt__MRN__CommunicationNode__star____gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__set__lt__MRN__CommunicationNode__star____gt__", (PyObject *) &Pystd__set__lt__MRN__CommunicationNode__star____gt___Type);
    PyModule_AddObject(m, (char *) "Std__set__lt__MRN__CommunicationNode__star____gt__Iter", (PyObject *) &Pystd__set__lt__MRN__CommunicationNode__star____gt__Iter_Type);
    /* Register the 'std::set<MRN::NetworkTopology::Node*>' class */
    if (PyType_Ready(&Pystd__set__lt__MRN__NetworkTopology__Node__star____gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__set__lt__MRN__NetworkTopology__Node__star____gt__", (PyObject *) &Pystd__set__lt__MRN__NetworkTopology__Node__star____gt___Type);
    PyModule_AddObject(m, (char *) "Std__set__lt__MRN__NetworkTopology__Node__star____gt__Iter", (PyObject *) &Pystd__set__lt__MRN__NetworkTopology__Node__star____gt__Iter_Type);
    /* Register the 'std::vector<MRN::NetworkTopology::Node*>' class */
    if (PyType_Ready(&Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__MRN__NetworkTopology__Node__star____gt__", (PyObject *) &Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter", (PyObject *) &Pystd__vector__lt__MRN__NetworkTopology__Node__star____gt__Iter_Type);
    /* Register the 'std::set<uint32_t>' class */
    if (PyType_Ready(&Pystd__set__lt__uint32_t__gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__set__lt__uint32_t__gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__set__lt__uint32_t__gt__", (PyObject *) &Pystd__set__lt__uint32_t__gt___Type);
    PyModule_AddObject(m, (char *) "Std__set__lt__uint32_t__gt__Iter", (PyObject *) &Pystd__set__lt__uint32_t__gt__Iter_Type);
    /* Register the 'std::vector<int>' class */
    if (PyType_Ready(&Pystd__vector__lt__int__gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt__int__gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt__int__gt__", (PyObject *) &Pystd__vector__lt__int__gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt__int__gt__Iter", (PyObject *) &Pystd__vector__lt__int__gt__Iter_Type);
    submodule = initMRNet_MRN();
    if (submodule == NULL) {
        return;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "MRN", submodule);
}
